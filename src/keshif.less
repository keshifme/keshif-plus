@page {
  margin: 0;
  marks: none;
}

.kshfPrintDef(){
  .authoringPanel,
  .dotSizes,
  .visViewControl,
  .showHelpIn,
  .viewFullscreen,
  .metricFuncSelectButton,
  .buttonRecordViewCollapse,
  .buttonRecordViewExpand,
  .removeRecordPanelButton,
  .recordDisplay_ViewGroup,
  .iconGroup,
  .recordDisplayConfigButton,
  .summaryLockButton, 
  .filterOutRecord,
  .overlay_Close,
  .editColorTheme,
  .summaryControls,
  .chartDescription, // removed for now.
  .tableHeaderGroup > .tableConfig, // table config gear icon
  .recordDisplayHeader,
  .rangeHandle,
  .base_Active,
  .idContentWrapper > span.theText:after,
  .timeseriesAttribs .prevTimeKey,
  .timeseriesAttribs .nextTimeKey,
  .lockCrumbMode,
  .ScatterControl-SwapAxis,
  .timeLimit,
  .recordDisplay:not(.usesSizeAttrib) .sizeGroup,
  .recordDisplay:not(.usesColorAttrib) .colorGroup,
  .timeAnimation > .attribDetailPlay,
  .timeAnimation > .timeKeyRange,
  .timeAnimation > .timeKeyStep,
  .clearFilterButton,
  .summaryDescription,
  .recordDisplayConfig,
  .catSortButton,
  .zoomControl,
  .panel.collapsed,
  .colorThemeOptions > .editColorTheme,
  &:not([recordChartType="list"]) .recordDisplayHeader,
  &[recordChartType="timeseries"] .timeAnimation,
  .lockButton
  {
    display: none !important;
  }

  // show mode-select on footer panel hover only
  .dashboardModeSelect{ opacity: 0; }
  .panel_Footer:hover .dashboardModeSelect{ opacity: 1; }

  .breadCrumbs{
    pointer-events: none;
  }

  .recordReverseSortButton,
  .browserDescription,
  .textSearchBox{
    visibility: hidden;
  }

  .kshfRecord.pointGeo > path.glyph_Main,
  .aggrGlyph.clusterGlyph > .measureGroup > path.measure_Active{
    stroke-dasharray: none !important;
  }

  .recordDisplay{
    border-top: solid 1px var(--color_background_Light-darken-15);
  }

  .headerGroup > .summaryNameWrapper{
    max-width: calc(~'100% - 10px');
  }


  .metricOptionWrapper_Text{
    text-decoration: none !important;
    &:after{
      content: "" !important;
    }
  }

  .recordInfo > .metricFuncText{
    font-weight: 400 !important;
  }

  .panel_Basic_In{
    padding-left: 0.5em;
  }
}

@media print {
  -webkit-print-color-adjust: exact;

  .exploreHeader{
    #HeaderButtons { display: none !important; }
  }
}



.kshf{

  // ********************************
  // COLOR SETTINNGS

  --color_bars: #B1BDC5; //#B0BFCA; //#98ABB9; //#8699A8;
  --color_bars-darken-10: #a4b1bb; // darken(#B1BDC5, 10%);

  --color_Compare_A: #ff6a33;
  --color_Compare_B: #2a6449; //#195036; //#f82387;
  --color_Compare_C: rgb(113,12,158);
  --color_Compare_D: #36a620;
  --color_Compare_E: #d21d6d;

  --color_hoverAction: #cb5454;

  --color_recordBar: var(--color_bars-darken-10);

  --color_distr_total: #DEE2E6;

  --color_onRecord: #EFEADF;           // @color_onRecord: #EFEADF;
  --color_onRecord-darken-20: #cdbd9b; // darken(@color_onRecord,20%);
  --color_onRecord-darken-50: #8a7445; // darken(@color_onRecord,50%);
  --color_onRecord-darken-70: #463b23; // darken(@color_onRecord,70%);

  --color_filter_clear: #8b9da9;

  --color_background_VeryLight: #EBEBEB;
  --color_background_Light: #EDEDED;
  --color_background_Light-darken-15: #c7c7c7;
  --color_background_Dark: #38404c;
  --color_darkGrayBackground: #4f5359;
  --color_mapBackground: #cad2d3;

  --color_axis_line: rgb(182, 179, 179);
  --color_axis_line_light: #e8e8e8;
  --color_item_count: #697682;
  --color_filter: #8b9da9;

  --color_query_and: #1D4870;
  --color_query_or:  #1C737A;
  --color_query_not: gray;
  --color_set_containment: rgb(64, 0, 255);

  // ANIMATION SETTINGS
  --transition_bgcolor:       background-color 100ms linear;
  --transition_opacity_slow:  opacity 500ms linear;
  --transition_opacity:       opacity 250ms linear;
  --transition_transform_bar: transform 750ms cubic-bezier(0.68, 0, 0.32, 1);

  --layout_animation: var(--transition_transform_bar), 
                      var(--transition_bgcolor), 
                      height 750ms cubic-bezier(0.68, 0, 0.32, 1);

  --bar_animation: var(--transition_transform_bar), 
                   var(--transition_bgcolor), 
                   var(--transition_opacity_slow);

  --layout_transition: height 750ms cubic-bezier(0.68, 0, 0.32, 1);

  --transition_all_750ms: all 750ms cubic-bezier(0.68, 0, 0.32, 1);
  --transition-flex-750ms: flex 750ms cubic-bezier(0.68, 0, 0.32, 1);

  // LAYOUT SETTINGS
  //--width_scatter_margin_left: 75px;
  //--height_scatter_margin_bottom: 92px;

  --height_percentile: 30px;

  --panelGapSize: 8px;

  // list variables
  --list_recordRank: 45px;
  --list_sortColWidth: 40px;
  --list_sortVizWidth: 80px;
  --list_sparklineVizWidth: 120px;
  --list_gridRecordWidth: 200px;

  display: grid;
  grid-template-columns: auto minmax(0, 1fr);
  grid-template-rows: auto minmax(0, 1fr) auto;
  grid-template-areas:
    "panelAuthoring panelDataStatus"
    "panelAuthoring panelData"
    "panelFooter panelFooter";
  
  overflow: hidden;
  position: relative;

  font-family: "Roboto", Helvetica, Arial, sans-serif;
  text-rendering: optimizeLegibility; // People say this has big performance drawbacks

  background-color: white;

  line-height: normal;

  box-sizing: border-box;
  *{ box-sizing: border-box; }

  @media print{
    .kshfPrintDef();
  }

  /** Dealing with tailwind issues */
  img{
    max-width: initial;
    display: initial;
    vertical-align: initial;
  }
  button, input, optgroup, select, textarea {
    font-family: "Roboto", Helvetica, Arial, sans-serif;
    font-size: initial;
    line-height: inherit;
  }
  select{
    margin: 0em;
    border-width: 1px;
    border-style: solid;
    border-color: var(--color_background_Dark);
  }
  p, a, button {
    font-size: initial;
    line-height: initial;
  }

  .iconColor(@color){
    color: @color;
    > .custom_icon > path{ 
      stroke: @color; 
      &.filling { fill: @color; }
    }
  }

  &[data-dashboardMode="Explore"]{
    //.editColorTheme,
    .mapView-UnmatchedData
    {
      display: none !important;
    }
  }



  &[data-dashboardMode="Capture"],
  &[data-dashboardMode="Print"]
  {
    .kshfPrintDef();
  }

  &[data-dashboardMode="Save"]{
    .panel_Bookmark{ display: flex; }
  }

  &[data-dashboardMode="Author"]{
    .authoringPanel{
      display: flex;
    }

    .deriveSummaryButton,
    .buttonSummaryRemove{
      display: inline-block !important;
    }
    
    .removeRecordPanelButton{
      display: block;
    }

    .kshfSummary:hover {
      .deriveSummaryButton{ opacity: 1 !important; pointer-events: all !important; }
    }
  }


  &[data-dashboardMode="Adjust"]{
    .filterButton,
    .lockButton{
      display: none !important;
    }

    .modifyAttribPos { 
      display: inline-block !important;
    }

    .aggrGlyph,
    .kshfRecord{ 
      pointer-events: none !important;
    }

    .authoringPanel > .attributePanel > .sidePanelGroupContent > .panelAdjustWidth { 
      display: block;
    }

    .catLabel { 
      pointer-events: all  !important; 
    }

    .panel_Footer {
      > .browserDescription > .customDescription {
        display: inline-block;
        > .customDescriptionButton{
          pointer-events: all !important;
        }
      }
    }

    .catGlyph > .catLabelGroup{
      pointer-events: all;
      &:hover {
        //outline: solid 1px var(--color_hoverAction);
        > .AndOrNot{ display: none; }
        > .catLabelEdit{ display: inline-block; }
      }
    }

    // adjust order of categories
    .catChart.catOrder_Fixed > .aggrGroup > .catGlyph > .catLabelGroup:hover > .catLabelOrder{ 
      display: inline-block;
    }

    span[class^="measure_"],
    .chartAxis_Measure .tick,
    .measureLabel{
      transition: none !important;
    }

    // Edit record name
    .recordInfo {
      pointer-events: none !important;
      > .recordName{ pointer-events: all; }
    }

    // Adjust category label width
    .kshfSummary{
      &[viewType="list"]:not(.collapsed):hover .chartCatLabelResize{ 
        display: block !important;
      }
    }

    // adjust panel width
    .panel.hasBlocks > .panelAdjustWidth{ display: block; }
    // adjust sort column width in record display
    &[recordChartType="list"]{
      .recordDisplay{
        &[sortAttribType="numeric"]:hover .adjustSortVizWidth{ display: block; }
        &.sortAttribOnTimeseries:hover .adjustSparklineVizWidth{ display: block; }
        &:hover {
          .adjustSortColumnWidth, 
          &:not([sortAttribType="time"]) .adjustSortVizWidth{ 
            display: block;
          }
        }
      }
    }
  } // Adjust mode


  &.dataLoaded{
    .showHelpIn { display: block; }
    .panel_ImportData{ display: none !important; }
    .panel_Wrapper.emptyDashboard .panelEmpty{ display: flex }
  }

  &:not(.dataLoaded){
    .attributePanel,
    .bookmarkPanel{ display: none !important; }
    .panel_Basic_In{ visibility: hidden !important; }
  }

  :focus{
    outline: none;
  }

  &.kshf_Modal{
    position: fixed;
    height: 100%;
    width: 100%;
    background-color: #847c7c2e;
    z-index: 1000;
    top: 0px;
    left: 0px;
  }

  &.noAnim{
    .aggrGlyph{ 
      transition: none;
      [class^="measure_"]{ transition: none !important; }
    }
    .intervalSlider {
      > .valueTickGroup > .valueTick{ transition: none !important; }
      > .controlLine > .base { transition: none !important; }
    }
    *[class^="percentileChart"] > .quantile.q_pos{
      transition: none;
    }
    .recordDisplay g.kshfRecord > path{
      transition: none;
    }
    .recordAxis > .tickGroup > .hmTicks{
      transition: none;
    }
    > .warningBox_wrapper{ transition: none; }
    .catChart{ transition: none; }
    .kshfSummary{ 
      transition: none;
      > .wrapper{ 
        transition: none;
        .summaryInterval > .histogram { transition: none; }
      }
    }
    .recordDisplay{ 
      transition: none;
      .recordDisplayWrapper{ transition: none; }
      .recordGroup_List > .recordGroup{ transition: none; }
    }
  }

  &:not(.noAnim){
    .chartAxis_Measure{
      transition: var(--bar_animation);
      .tick{ 
        transition: var(--bar_animation);
      }
    }
    .recordSortViz{
      transition: var(--transition_transform_bar),
                  var(--transition_bgcolor); 
    }

    .wrapper{ transition: var(--layout_transition) }
    .panels_Above{ transition: var(--layout_transition) }
    .controlLine {
      > .base{ transition: var(--bar_animation) }
      > .rangeHandle{ transition: var(--transition_all_750ms); }
    }
  }

  &.noPointerEvents{
    .intervalSlider,
    .measureLabel  ,
    .aggrGroup     ,
    .catLabelGroup ,
    .catLabel      ,
    .catLabelOrder ,
    .catLabelEdit  ,
    .leaflet-overlay-pane,
    .leaflet-interactive ,
    .recordMap_SVG,
    .kshfRecord,
    .dragSelection,
    .clearFilterButton,
    .recordGroup,
    .spatialQueryBox
    .kshfRecord,
    .kshfRecord > path,
    .aggrGlyph,
    [class^="measure_"],
    [class^="setSize"]{ 
      pointer-events: none !important;
    }

    .intervalSlider{
      > .controlLine > .base_Active{ transition: none; }
      > .controlLine > .rangeHandle{ transition: none; }
    }
  }

  // Cursor styles
  &.adjustingWidth{ cursor: ew-resize; }
  &[drag_cursor="grab"]{ .cursorGrab(); }
  &[drag_cursor="grabbing"]{ .cursorGrabbing(); }

  .panel.dragging .chartCatLabelResize{
    display: block !important;
    border-right: solid var(--color_hoverAction) 3px;
  }

  .leaflet-control-attribution {
    > a{
      color: gray;
      font-size: 12px;
    }
  }

  .viewTotalAggr{
    display: none !important; // forcing off!
    background-color: var(--color_distr_total);
    color: var(--color_filter_clear);
    border: solid 1px var(--color_filter_clear);
    vertical-align: top;
    cursor: pointer;
    height: 1.2em;
    padding: 1px 3px 1px 3px;
    font-size: 0.9em;
    transition: all 250ms;
    &.isActive{ display: inline-block; }
    &:hover{
      color: var(--color_hoverAction);
      //background-color: var(--color_filter_clear);
    }
    > .fa-eye-slash{ display: none; }
    > .fa{
      position: relative;
      top: -2px;
    }
  }

  .panel_Bookmark{
    position: absolute;
    width: 100%;
    height: 133px;
    bottom: 30px;
    display: none;
    border-top: solid 1px var(--color_background_Dark);
    background-color: #dcdee0;
    box-shadow: 0px -1px 20px var(--color_darkGrayBackground);
    z-index: 2000;
    > .bookmarkPanelHeader{
      height: 5px;
      font-family: "Roboto Slab", serif;
      font-size: 0.9em;
      color: white;
      font-weight: 400;
      cursor: default;
      text-align: left;
      border-radius: 3px;
      background-color: var(--color_background_Dark);
      padding: 4px;
      line-height: 1em;
    }
    > .newBookmarkBlock{
      flex: 0 0 auto;
      display: inline-grid;
      grid-template-columns: auto 100px;
      grid-template-rows: auto auto auto;
      width: 270px;
      position: relative;
      margin: 0px 5px 5px;
      vertical-align: top;
      position: relative;

      > .newBookmarkName{
        grid-column: 1 / span 1;
        grid-row: 1 / span 1;

        margin: 5px 0px;
        padding: 3px;

        font-weight: 500;
        border: solid 0px gray;
        border-bottom: solid 1px gray;
        cursor: text;
        font-size: 0.9em;
        width: 100%;
        color: var(--color_hoverAction);
        &:hover{ color: var(--color_hoverAction); }
        &:focus{
          box-shadow: 0 0 3px gray;
          outline: 0 none;
        }
        &::-webkit-input-placeholder{ color: gray; }
        &::-moz-input-placeholder{ color: gray; }
        &:-ms-input-placeholder{ color: black; }
      }
      > .fa-lightbulb-o{
        position: absolute;
        right: 5px;
        bottom: 5px;
        z-index: 100;
        color: gray;
        display: inline-block;
        font-size: 1.2em;
      }
      > .newBookmarkDescr{
        grid-column: 1 / span 2;
        grid-row: 3 / span 1;
        width: 100%;
        resize: none;
        border: solid 1px lightgray;
        font-family: "Roboto Slab";
        font-size: 0.8em;
        font-weight: 300;
        max-height: 4.2em;
        &:focus{
          box-shadow: 0 0 1px gray;
          outline: 0 none;
        }
      }
      > .saveBookmark{
        grid-column: 2 / span 1;
        grid-row: 1 / span 2;
        font-size: 0.9em;
        font-weight: 400;
        font-family: "Roboto Slab";
        cursor: pointer;
        color: white;
        padding: 4px;
        border-radius: 0px 0px 5px 5px;
        margin: 0px 0px 5px 5px;
        padding-top: 3px;
        text-align: center;
        background-color: var(--color_background_Dark);
        &:hover{ background-color: var(--color_hoverAction); border-color: var(--color_hoverAction) }
      }
      >.bookmarkVisibility{
        grid-column: 1 / span 1;
        grid-row: 2 / span 1;
        color: gray;
        cursor: pointer;
        width: 100%;
        margin-bottom: 4px;
        display: inline-block;
        text-align: left;
        > .fa{ width: 20px; text-align: center; }
        > .fa-eye-slash { display: none; }
        > .fa-eye { display: inline-block; }
        &:after{ 
          content: "Visible";
          margin: 0px 4px;
          font-size: 0.8em;
          vertical-align: middle;
        }
        &.privateBookmark{ 
          > .fa-eye-slash { display: inline-block; }
          > .fa-eye { display: none; }
          color: var(--color_hoverAction);
          &:after{ content: "Private" }
        }
        &:hover{ color: var(--color_hoverAction); }
        > .bookmarkVisibilityTitle{
          font-size: 0.8em;
          color: black;
        }
      }
    }
  }// panel_Bookmark

  &[measureFunc="Count"]{
    .configItem_measureSummary,
    .aggrMetricSummaries,
    .kshfRecord.pointGeo > text.sizeValueText,
    .metricOptionWrapper.timeKeys,
    .metricOptionWrapper.measureSummary,
    .aggrMetricSummaries_Detail{
      display: none !important;
    }
  }

  &[breakdownMode="absolute"]{
    .breakdownModeIcon:before{
      content: "\f292"; // hashtag
    }
    .configItem_breakdownMode > td.configItem_Icon > .icon:before{
      content: "\f292"; // hashtag
    }
  }

  &[breakdownMode="dependent"]{
    .chartAxis_Measure > .tick > .text:after{ content: "%"; }

    .highlightedAggrValuePointer{ display: block; }
    .viewTotalAggr{ display: none !important; }
    .comparedSummary.kshfSummary_Categorical:not(.isMultiValued){
      .chartAxis_Measure > { .tickGroup, .measureDescrLabel{ display: none; } }
      .measureLabelGroup{ opacity: 0; pointer-events: none; }
    }
  }

  &[breakdownMode="relative"]{
    .chartAxis_Measure > .tick > .text:after{ content: "%"; }

    .highlightedAggrValuePointer{ display: block; }
    .viewTotalAggr{ display: none !important; }
    .comparedSummary.kshfSummary_Categorical:not(.isMultiValued){
      .chartAxis_Measure > { .tickGroup, .measureDescrLabel{ display: none; } }
    }
    &.stackedChart{
      .comparedSummary:not(.isMultiValued) .measureLabelGroup{ visibility: hidden; }
    }
    .measure_Area_Active.asLine{
      display: none;
    }
  }

  &[breakdownMode="relative"],
  &[breakdownMode="dependent"]{
    .Summary_Set{
      .strengthControl{
        display: inline-block !important;
      }
    }
    .setPairGlyph{
      > .measureGroup > .measure_Active{ 
        fill: rgba(1,1,1,0) !important;
      }
      > .setPairBackground{
        opacity: 1 !important;
      }
      &.isSubset{
        > .setPairBackground{
          stroke-width: 2px;
          stroke: var(--color_set_containment);
        }
      }
    }
  }

  &:not(.showWholeAggr){
    .kshfSummary:not([viewtype="map"]){
      .measure_Active,
      .measure_Area_Active,
      .aggrGlyph:not(.noValueAggr) .measureLabel_Active{ 
        opacity: 0 !important; 
        pointer-events: none !important;
        fill-opacity: 0 !important;
      }
    }
  }




  &[class*="selectCompare"]{
    &:not(.stackedChart){
      .summaryCategorical, 
      .kshfSummary_Numeric{ 
        .aggrGlyph:not(.noValueAggr) .measureLabel_Active{ opacity: 0 !important; }
      }
    }
    .recordMap_SVG, .recordGroup_Scatter {
      .kshfRecord:not([class*="rec-selected"]) {
      > circle , > path {
          fill: var(--color_bars) !important;
          stroke: gray !important;
        }
      }
    }
    .breadCrumbs_Compare{
      > .breadCrumbHeader{
        display: inline-block;
      }
    }
    .recordDisplay .mapGlyphColorSetting .colorGroup{
      display: none !important;
    }

    &[recordChartType="timeseries"] {
      .TimeseriesColorInfo{ display: none; }
      .kshfRecord {
        > path{
          stroke: steelblue !important;
          opacity: 0.5 !important;
        }
        > foreignObject > div.recordText_Dot{ background-color: steelblue !important; }
      }
    }
  }
  &:not([class*="selectCompare"]){
    .colorCompareGroup{ display: none; }
  }
  &[class*="selectCompare"]{
    .clusterGlyph {
      > text.sizeValueText{
        fill: white;
        text-shadow: 0px 0px 5px black, 0px 0px 2px black !important;
      }
      > .measureGroup > path.measure_Active{
        fill: var(--color_bars) !important;
        stroke: var(--color_background_Dark) !important;
      }
    }
  }
  &.selectCompare_A{
    .measure_Compare_A{ opacity: 1 !important; pointer-events: all !important; }
    .measureLabel_Compare_A{ opacity: 1; }
    .measure_Area_Compare_A{ opacity: 1 !important; }
    .kshfSummary.chartVisiblePercentile .percentileChart_Compare_A{ display: block !important; }
  }
  &.selectCompare_B{
    .measure_Compare_B{ opacity: 1 !important; pointer-events: all !important;}
    .measureLabel_Compare_B{ opacity: 1; }
    .measure_Area_Compare_B{ opacity: 1 !important; }
    .kshfSummary.chartVisiblePercentile .percentileChart_Compare_B{ display: block !important; }
  }
  &.selectCompare_C{
    .measure_Compare_C{ opacity: 1 !important; pointer-events: all !important;}
    .measureLabel_Compare_C{ opacity: 1; }
    .measure_Area_Compare_C{ opacity: 1 !important; }
    .kshfSummary.chartVisiblePercentile .percentileChart_Compare_C{ display: block !important; }
  }
  &.selectCompare_D{
    .measure_Compare_D{ opacity: 1 !important; pointer-events: all !important; }
    .measureLabel_Compare_D{ opacity: 1; }
    .measure_Area_Compare_D{ opacity: 1 !important; }
    .kshfSummary.chartVisiblePercentile .percentileChart_Compare_D{ display: block !important; }
  }
  &.selectCompare_E{
    .measure_Compare_E{ opacity: 1 !important; pointer-events: all !important; }
    .measureLabel_Compare_E{ opacity: 1; }
    .measure_Area_Compare_E{ opacity: 1 !important; }
    .kshfSummary.chartVisiblePercentile .percentileChart_Compare_E{ display: block !important; }
  }




  &[recordChartType="map"],
  &[recordChartType="scatter"]{ 
    .recordDisplay.usesColorAttrib .colorGroup{
      flex: 1;
    }
  }

  &[recordChartType="map"] {
    .recordDisplay .attribGroup{
      background-color: white;
    }
  }

  &[recordChartType="scatter"],
  &[recordChartType="map"],
  &[recordChartType="timeseries"]{
    // put time animation controls below the visualizations
    .timeAnimation{ order: 4; }
  }

  &[recordChartType="scatter"] .recordDisplay.usesSizeAttrib .sizeGroup, 
  &[recordChartType="map"]     .recordDisplay.usesSizeAttrib[data-geotype="Point"] .sizeGroup,
  &[recordChartType="scatter"] .recordDisplay.usesColorAttrib .colorGroup, 
  &[recordChartType="map"]     .recordDisplay.usesColorAttrib .colorGroup
  {
    > .attribControlGroup{ 
      > .header{ display: none; }
    }
    .attribLegendGroup{ display: flex; }
    select.mainSelect{
      background-color: inherit;
      width: inherit;
    }
    .editColorTheme{ display: block; }

    .dotSizes{
      white-space: inherit;
      padding-left: inherit;
      > .dotSize{ display: inherit; }
    }
  }

  .recordDisplayWrapper{
    display: flex;
    flex-direction: column;
    flex: 1;
    z-index: 5; // if 1, the dropdown of color/etc variable goes below the regular charts 
    position: relative;
    overflow: hidden;
    transition: var(--layout_transition), var(--transition_opacity);
    border: solid 1px var(--color_background_Light-darken-15);
    border-width: 0px 1px 1px 1px;
    opacity: 1;
    
    &.dragging{

      &:not(.drawSelecting) {
        .recordMap_SVG{ opacity: 0.3; }
        .spatialQueryBox{ opacity: 0.3; }
      }
      .recordGroup_Scatter{
        transition: none;
        .kshfRecord{ transition: none; }
      }
      .recordAxis > .tickGroup > .hmTicks { 
        transition: none;
      }
      .recordBase_Scatter {
        transition: none;
      }
      .recordBase_Scatter,
      .recordBase_Map, 
      .recordBase_NodeLink{ 
        .cursorGrabbing();
      }
    }
    &.drawSelecting{
      cursor: cell !important;
      .leaflet-overlay-pane,
      .leaflet-interactive,
      .recordMap_SVG,
      .kshfRecord,
      .dragSelection,
      .clearFilterButton,
      .recordGroup,
      .spatialQueryBox
      .recordBase_Map .kshfRecord > path,
      [class^="setSize"]
      { 
        pointer-events: none !important;
      }
      .spatialQueryBox > .clearFilterButton{ display: none; }
    }

    .leaflet-zoom-anim {
      .clusterGroup{ display: none; }
    }
  }

  .recordDisplay{
    &.narrow{
      .ViewTitle,
      .detailRange,
      //.recordDisplayName,
      .recordTextSearch > span, 
      .recordTextSearch > input{ 
        display: none !important;
      }
    }
    &.hasTimeKey{
      .timeAnimation{ display: flex; }
    }
    &.dimmed{
      .recordGroup_Timeseries > .kshfRecord:not([class*="rec-selected-onRecord"]){ 
        > path {opacity: 0.2 !important; }
        .recordText_side{ opacity: 0; }
      }
      .recordGroup_Scatter > svg > .recordGroup > .kshfRecord:not([class*="rec-selected"]):not(.hidden){
        opacity: 0.2;
      }
    }
    &:not(.usesColorAttrib){
      .recordBase_Map .kshfRecord{
        &[class*="rec-selected-Compare_"] > path.glyph_Main{ 
          stroke: white !important;
        }
      }
      .colorOptions{
        display: none;
      }
    }
    .recordDisplayConfigBotton{ display: inline-block; }
    &:not([data-ts_Type="Value"]){
      .visViewControlButton.TimeseriesControl-FitValueAxis{ display: none !important; }
    }
  }

  &[recordChartType="none"]{
    .recordDisplay{ display: none; }
  }

  &:not(.comparedMultiValue){
    &[recordChartType^="list"] .recordDisplay {
      .kshfRecord.rec-selected-Compare_A > .recordSortVizHost > .recordSortViz { background-color: var(--color_Compare_A); }
      .kshfRecord.rec-selected-Compare_B > .recordSortVizHost > .recordSortViz { background-color: var(--color_Compare_B); }
      .kshfRecord.rec-selected-Compare_C > .recordSortVizHost > .recordSortViz { background-color: var(--color_Compare_C); }
      .kshfRecord.rec-selected-Compare_D > .recordSortVizHost > .recordSortViz { background-color: var(--color_Compare_D); }
      .kshfRecord.rec-selected-Compare_E > .recordSortVizHost > .recordSortViz { background-color: var(--color_Compare_E); }
    }
  }

  .kshfRecord{
    &.isExcluded{ display: none !important; }
  }

  &[recordChartType="list"]{
    .panel_left:after{ display: block; }
    .panel_right:after{ display: block; }

    .recordDisplay{
      overflow: hidden;
      .recordGroup_List{ 
        display: flex; 
        flex-direction: column;
      }

      &.showRank  {
        .recordRank{ display: inline-block; }
      }
      &.showSortBars{
        .recordSortVizHost{ display: block; }
      }

      &:not(.collapsed) .recordReverseSortButton { display: inline-block; }

    }
    .kshfRecord{
      opacity: 1;
      cursor: default;
      overflow: hidden;
      vertical-align: top;
      padding: 1px;
      position: relative;
      transition: var(--transition_opacity_slow), var(--transition_bgcolor);

      > .recordRank{
        display: none;
        width: var(--list_recordRank);
        font-size: 0.8em;
        color: gray;
        font-weight: 300;
        text-align: right;
        flex: 0 0 auto;
        &:before{ 
          content: "#";
          padding-right: 2px;
          font-size: 0.9em;
          opacity: 0.6;
        }
      }

      > .recordSortValue{
        cursor: pointer;
        order: 1;
      }

      > .recordSortVizHost{
        order: 2;
      }

      > .removeRecordButton{
        position: absolute;
        right: 2px;
        opacity: 0;
        color: gray;
        cursor: pointer;
        transition: color 250ms linear;
        &:hover{ color: var(--color_hoverAction); }
      }

      > .compareBoxes{
        order: 3;
        align-self: center;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        height: 1.3em;
        width: 1.1em;
        position: relative;
        padding: 2px 0px;
        > .glyph_Compare_A{ display: none; fill: var(--color_Compare_A); }
        > .glyph_Compare_B{ display: none; fill: var(--color_Compare_B); }
        > .glyph_Compare_C{ display: none; fill: var(--color_Compare_C); }
        > .glyph_Compare_D{ display: none; fill: var(--color_Compare_D); }
        > .glyph_Compare_E{ display: none; fill: var(--color_Compare_E); }
      }
      &.rec-selected-Compare_A > .compareBoxes > .glyph_Compare_A{ display: block; }
      &.rec-selected-Compare_B > .compareBoxes > .glyph_Compare_B{ display: block; }
      &.rec-selected-Compare_C > .compareBoxes > .glyph_Compare_C{ display: block; }
      &.rec-selected-Compare_D > .compareBoxes > .glyph_Compare_D{ display: block; }
      &.rec-selected-Compare_E > .compareBoxes > .glyph_Compare_E{ display: block; }

      > .content{
        order: 4;
        align-self: center;
        border-color: rgba(1,1,1,0);
        border-style: solid;
        position: relative;
        cursor: pointer;
        padding-left: 0px;
        transition: border-color 250ms ease-in-out;
        font-weight: 300;

        > .iteminfo{
          float:none;
          clear: left;
          font-weight:normal;
          margin-bottom: 2px;
        }
        > .iteminfo_0{
          font-size:1.0em;
          color: black;
        }
        > .iteminfo_1{
          font-size:0.9em;
          color: #555555;
        }
        > .iteminfo_2{
          font-size:0.8em;
          color: #555555;
          font-style:italic;
          font-weight:300;
        }
        > .iteminfo_3{
          font-size:0.8em;
          color: rgb(167, 31, 31);
          font-style:italic;
          font-weight:300;
        }
      }

      &:hover > {
        .removeRecordButton{ opacity: 1; }
      }

      .item_details{ display: none; }
      &.showDetails{
        max-height: none;
        .item_details{ display: block; }
      }

      &.rec-selected-onRecord > {
        .recordSortVizHost > .recordSortViz { background-color: var(--color_onRecord-darken-20) !important; }
      }

      &.rankBeyondListRange{
        display: none !important;
      }
    } // div.kshfRecord

    .recordDisplay[data-list_ViewType="List"]{
      .configItem_list_gridRecordWidth{
        display: none;
      }
      &.showRank  {
        .showRecordRank{ display: inline-block; }
      }

      .kshfRecord{
        display: flex;
        flex-direction: row;
        width: 100%;
        padding: 0px;
        border-bottom: solid 1px var(--color_background_Light-darken-15);
        > .recordSortValue{
          flex: 0 0 auto;
          width: var(--list_sortColWidth);
          padding-right: 2px;
          font-weight: 300;
          text-align: right;
          font-size: 0.8em;
          align-self: center;
          white-space: nowrap;
          text-overflow: ellipsis;
          overflow: hidden;
          > .unitName{ margin-right: 1px; }
        }
        > .recordRank{
          align-self: center;
          padding-right: 4px;
        }
        > .content{ 
          flex: 1;
          border-width: 1px 4px;
        }
        &.rec-selected-onRecord {
          > .content{ border-color: var(--color_onRecord-darken-20) !important; }
        }
      }
    }

    .recordDisplay[data-list_ViewType="Grid"] {
      .configItem_list_sortColWidth,
      .configItem_list_sortVizWidth,
      .configItem_list_sparklineVizWidth
      {
        display: none;
      }

      .dragWidthHandle{
        display: none !important;
      }
      .recordGroup {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: flex-start;
        align-content: flex-start;
        justify-content: space-around;
        
        > .kshfRecord{
          display: flex;
          flex-direction: column;
          margin: 4px;
          padding: 4px;
          align-self: flex-start;
          width: var(--list_gridRecordWidth);
          border: solid 1px var(--color_background_VeryLight);
          transition: border-color 250ms ease-in-out;

          &.rec-selected-onRecord {
            border-color: var(--color_onRecord-darken-20) !important;
            border-width: 2px;
            padding: 3px;
          }

          > .compareBoxes{
            order: 2;
          }
          > .recordSortVizHost{
            order: 3;
          }


          > .recordRank,
          > .recordSortValue,
          > .recordSortVizHost,
          > .recordSparklineVizHost,
          > .content{
            width: 100%;
          }

          > .recordRank,
          > .recordSortValue{
            text-align: left;
          }

          > .recordSortVizHost,
          > .recordSparklineVizHost{
            margin: 0px;
          }

          > .content{ 
            display: block;
            border-width: 2px 0;
          }

          > .compareBoxes{
            position: relative;
            margin-top: -1.3em;
            align-self: flex-end;
          }

        }
      }
    }
  }
  


  &[recordChartType="map"]{
    .panel_left:after{ display: block; }
    .panel_right:after{ display: block; }

    .recordDisplayWrapper{
      overflow: visible;
    }

    .recordDisplayConfigButton{
      display: none;
    }

    .kshfRecord{
      cursor: pointer;
      > path{
        pointer-events: visiblePainted;
        transition: fill 250ms linear;
        &.glyph_Main{
          stroke-opacity: 0.7;
          stroke-width: 0.5px;
          stroke: white;
          fill: var(--color_bars);
        }
        &.glyph_Compare_A{ .stroke_test(); fill: var(--color_Compare_A);}
        &.glyph_Compare_B{ .stroke_test(); fill: var(--color_Compare_B);}
        &.glyph_Compare_C{ .stroke_test(); fill: var(--color_Compare_C);}
        &.glyph_Compare_D{ .stroke_test(); fill: var(--color_Compare_D);}
        &.glyph_Compare_E{ .stroke_test(); fill: var(--color_Compare_E);}
        &.noData{ display: none; }
      }
      &.rec-selected-onRecord > path.glyph_Main{
        fill: var(--color_onRecord-darken-50) !important;
        stroke: var(--color_onRecord-darken-70) !important;
        stroke-width: 1px;
      }
      &:not(.pointGeo){
        &[class*="rec-selected"] > path.glyph_Main{ 
          stroke-width: 1px;
          stroke-opacity: 0.9;
          stroke: white !important;
        }
        &.rec-selected-Compare_A > path.glyph_Main{ fill: var(--color_Compare_A) !important; }
        &.rec-selected-Compare_B > path.glyph_Main{ fill: var(--color_Compare_B) !important; }
        &.rec-selected-Compare_C > path.glyph_Main{ fill: var(--color_Compare_C) !important; }
        &.rec-selected-Compare_D > path.glyph_Main{ fill: var(--color_Compare_D) !important; }
        &.rec-selected-Compare_E > path.glyph_Main{ fill: var(--color_Compare_E) !important; }
      }
      &.pointGeo{
        &[class*="rec-selected-Compare_"] {
          > path.glyph_Main{ fill: white !important; }
          > text.sizeValueText{
            fill: white;
            text-shadow: 0px 0px 5px black, 0px 0px 2px black !important;
          }
        }
        &.rec-selected-Compare_A > path.glyph_Compare_A{ display: block; }
        &.rec-selected-Compare_B > path.glyph_Compare_B{ display: block; }
        &.rec-selected-Compare_C > path.glyph_Compare_C{ display: block; }
        &.rec-selected-Compare_D > path.glyph_Compare_D{ display: block; }
        &.rec-selected-Compare_E > path.glyph_Compare_E{ display: block; }
      }
    }

    .recordDisplay{
      overflow: visible !important;

      &:not(.collapsed) .visViewControl{ 
        display: flex;
        flex-direction: column;
        .ClickModeControlGroup{
          flex-direction: column;
        }
      }
      span[class^="MapControl"] { display: inline-block; }

      &:not(.usesSizeAttrib):not(.usesColorAttrib){
        .mapGlyphColorSetting > .attribGap{ flex-grow: 1; }
      }

      .detailGroup{ display: none !important; }

      .sizeGroup{
        display: none;
      }
      &[data-geotype="Point"]{ .sizeGroup{ display: flex; } }

      .visViewControl > {
        .mapView-UnmatchedData.active{ display: inline-block; }
      }

      .recordBase_Map{ display: block; }

      .mapGlyphColorSetting {
        display: flex;
        flex-direction: row;
        left: 5px;
        right: 5px;
        > .attribGap{
          flex: 0.5 10 auto; // grow shrink auto
          min-width: 1em;
        }
        > .attribGroup{
          box-shadow: 0 0px 3px rgba(0,0,0,0.65);
        }
      }

      .recordGroup{ overflow: visible !important; }
    }
  }


  &[recordChartType="scatter"]{

    .recordDisplay{
      overflow: visible;
      &:not(.usesColorAttrib) .mapGlyphColorSetting > .attribGap{ flex: 1.5 10 auto; }
    }

    &[class*="selectCompare"]{
      .recordDisplay .mapGlyphColorSetting > .attribGap{ flex: 1.5 10 auto; }
    }

    .ScatterXControlGroup{ display: flex; }

    .recordBase_Scatter{ display: block !important; }

    .ScatterControl-SwapAxis{ display: block; }

    .recordDisplay_ViewAs_scatter{
      > svg { fill: white; }
    }
  }

  &[recordChartType="nodelink"]{
    .NodeLinkControlGroup{ display: flex; }

    .recordBase_NodeLink{ display: block !important; }
  }

  &[recordChartType="scatter"], 
  &[recordChartType="nodelink"]{
    .kshfRecord{
      cursor: pointer;
      > path{
        &.glyph_Main{
          fill: var(--color_distr_total);
          stroke: gray;
          stroke-width: 1;
          cursor: pointer;
          pointer-events: visible;
        }
        &.glyph_Compare_A{ display: none; fill: var(--color_Compare_A); }
        &.glyph_Compare_B{ display: none; fill: var(--color_Compare_B); }
        &.glyph_Compare_C{ display: none; fill: var(--color_Compare_C); }
        &.glyph_Compare_D{ display: none; fill: var(--color_Compare_D); }
        &.glyph_Compare_E{ display: none; fill: var(--color_Compare_E); }
      }

      &[class*="rec-selected-Compare_"] > path.glyph_Main{ fill: white !important; }
      &.rec-selected-Compare_A > path.glyph_Compare_A{ display: block; }
      &.rec-selected-Compare_B > path.glyph_Compare_B{ display: block; }
      &.rec-selected-Compare_C > path.glyph_Compare_C{ display: block; }
      &.rec-selected-Compare_D > path.glyph_Compare_D{ display: block; }
      &.rec-selected-Compare_E > path.glyph_Compare_E{ display: block; }
      &.rec-selected-related > path.glyph_Main{ 
        fill: var(--color_onRecord-darken-20) !important;
      }
      &.rec-selected-onRecord > path.glyph_Main{ 
        fill: var(--color_onRecord-darken-50) !important;
      }

      opacity: 1;
      transition: var(--transition_opacity);
      &.hidden{
        opacity: 0;
        pointer-events: none;
      }

      > foreignObject{
        pointer-events: none;
        overflow: visible;
      }
      &.hideTextLabel, 
      &:hover
      {
        > foreignObject{ display: none; }
      }
    }

    .panel_left:after{ display: block; }
    .panel_right:after{ display: block; }

    .colorGroup{
      flex: 1;
    }

    .recordDisplay{
      overflow: visible;
      .detailGroup{ display: none !important; }

      .mapGlyphColorSetting{
        top: auto;
        width: 100%;
        bottom: 0px;
        right: 0px;
        left: 0px;
        display: flex;
        flex-direction: row;
        > .colorCompareGroup{
          flex: 1;
        }
      }
      &:not(.collapsed) .visViewControl{
        display: flex;
        flex-direction: column;
      }

      .recordLink{
        pointer-events: none;
        stroke: var(--color_axis_line);
        stroke-opacity: 1;
        stroke-width: 0.5;
      }
    }
  }
  &[recordChartType="nodelink"]{
    .recordDisplay{
      &[NodeLinkState="started"] .NodeLinkControl-AnimPlay{ display: none !important; }
      &[NodeLinkState="stopped"] .NodeLinkControl-AnimPause{ display: none !important; }
    }
  }

  &:not([recordChartType="list"]){
    .configItem_list_ViewType,
    .configItem_list_showRank,
    .configItem_list_sortColWidth,
    .configItem_list_sortVizWidth,
    .configItem_list_sortVizRange,
    .configItem_list_sparklineVizWidth,
    .configItem_list_gridRecordWidth,
    .configItem_list_Column{
      display: none;
    }
  }

  &:not([recordChartType="scatter"]){
    .configItem_scatter_xAxisScale,
    .configItem_scatter_yAxisScale,
    .configItem_scatter_showTrails{
      display: none;
    }
  }

  &:not([recordChartType="timeseries"]){
    .configItem_ts_Type,
    .configItem_ts_ChangeVsTimeKey,
    .configItem_ts_timeKeysStep,
    .configItem_ts_valueAxisScale,
    .configItem_fitValueAxis,
    .configItem_timeSeriesSelectMode,
    .ts_only{
      display: none;
    }
  }


  .recordDisplayConfigButton{
    &.fa-spin{ opacity: 1 !important; } // config is active
  }


  &[recordChartType="timeseries"]{
    .TimeseriesControlGroup{ 
      display: flex;
    }
    .TimeseriesColorInfo{
      position: absolute;
      left: 100%;
      margin-left: 20px;
      width: 120px;
      text-align: right;
      top: 100%;
      color: gray;
      font-weight: 300;
      font-size: 0.8em;
      cursor: default;
    }
    .timeAnimation{ 
      display: flex; 
      > .timeKeyStep,
      > select.timeKeySelect{ 
        display: none;
      }
      > .clearRange{
        display: block;
      }
      > .timeKeyRange{
        .timeseriesRange{ display: flex; }
        
        .rangeTick-cur,
        .attribDetailRange{ 
          display: none;
        }
      }
    }
    &.noRecordDots{
      .timeSeriesDot{
        display: none;
      }
    }
    .visViewControl{ 
      left: 50%;
      transform: translateX(-50%);
    }
    &:not(.collapsed) .visViewControl{ 
      display: flex;
      bottom: 5px;
      top: auto;
    }
    .panel_left:after{ display: block; }
    .panel_right:after{ display: block; }
    .kshfRecord{
      > path{
        fill: none;

        stroke: steelblue;
        stroke-width: 2px;
        stroke-linejoin: round;
        stroke-linecap: round;
        opacity: 0.25;

        transition: var(--transition_opacity), stroke 300ms linear;

        clip-path: url(#recordLineClippath);
      }
      > .dotGroup > .timeSeriesDot{ // svg.circle
        fill: white;
        stroke: gray;
        stroke-width: 1;
        opacity: 1;
        cursor: pointer;
        pointer-events: none;
        transition: var(--transition_all_750ms);
        &.visible{
          display: block;
          stroke-width: 2;
          stroke: var(--color_onRecord-darken-70);
          fill: var(--color_onRecord-darken-20);
        }
      }
      > foreignObject{
        pointer-events: all;
        width: 120px;
        height: 1em;
        overflow: visible;
        transition: all 700ms ease-in-out, var(--transition_opacity);
        > div.recordText_side{
          position: relative;
          max-width: 120px;
          max-height: 1.5em;
          display: inline-block;

          background: none;

          font-family: "Roboto";
          font-size: 0.9em;
          font-weight: 300;

          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          
          cursor: default;
        }
        > .recordText_Dot{
          position: absolute;
          height: 0.8em;
          width: 0.25em;
          left: -0.5em;
          top: 0.1em;
          opacity: 0.75;
          background-color: steelblue;
        }
        &.hidden{
          display: none;
        }
        &.overlapping {
          pointer-events: none;
          opacity: 0;
          > .recordText_Dot{
            opacity: 0;
          }
        }
      }

      &.noTimeSeries{ display: none !important; }
      &.filteredOut{ display: none !important; }
      &.rec-selected-onRecord {
        > path{
          stroke: var(--color_onRecord-darken-70) !important;
          opacity: 1 !important;
        }
        > foreignObject {
          display: block;
          opacity: 1;
          > div.recordText_side{
            opacity: 1 !important;
          }
        }
        > .dotGroup > .timeSeriesDot{
          display: block;
          stroke-width: 2;
          stroke: var(--color_onRecord-darken-70);
          fill: var(--color_onRecord-darken-20);
        }
      }
      &[class*="rec-selected-Compare_"] {
        > path{ stroke-width: 3px; opacity: 0.7 !important; }
      }
      &.rec-selected-Compare_A {
        > path{ stroke: var(--color_Compare_A) !important; }
        > foreignObject > div.recordText_side{ color: var(--color_Compare_A); }
        > foreignObject > div.recordText_Dot { background-color: var(--color_Compare_A) !important; }
      }
      &.rec-selected-Compare_B {
        > path{ stroke: var(--color_Compare_B) !important; }
        > foreignObject > div.recordText_side{ color: var(--color_Compare_B); }
        > foreignObject > div.recordText_Dot { background-color: var(--color_Compare_B) !important; }
      }
      &.rec-selected-Compare_C {
        > path{ stroke: var(--color_Compare_C) !important; }
        > foreignObject > div.recordText_side{ color: var(--color_Compare_C); }
        > foreignObject > div.recordText_Dot { background-color: var(--color_Compare_C) !important; }
      }
      &.rec-selected-Compare_D {
        > path{ stroke: var(--color_Compare_D) !important; }
        > foreignObject > div.recordText_side{ color: var(--color_Compare_D); }
        > foreignObject > div.recordText_Dot { background-color: var(--color_Compare_D) !important; }
      }
      &.rec-selected-Compare_E {
        > path{ stroke: var(--color_Compare_E) !important; }
        > foreignObject > div.recordText_side{ color: var(--color_Compare_E); }
        > foreignObject > div.recordText_Dot { background-color: var(--color_Compare_E) !important; }
      }
    }

    .recordGroup_Timeseries{
      position: absolute;
      display: block;
      height: 100%;
      width: 100%;
      top: 0px;
      left: 0px;

      transform-origin: top left;
      transition: var(--layout_animation);
      overflow: visible;
      //pointer-events: none;
    }

    .ClickModeControlGroup{ display: none; }
    .ViewControlGroup{ display: none; }

    .recordDisplay{

      .recordBase_Timeseries { display: block !important; }

      .recordTimeSeriesSelect{ 
        font-family: "Roboto Slab";
        font-size: 1em;
        background-color: var(--color_darkGrayBackground);
        border: none;
        color: white;
        max-width: 100%;
        transition: var(--transition_bgcolor);
        &:hover{
          background-color: var(--color_hoverAction);
        }
      }

      .filterArea{
        display: none;
        position: absolute;
        border: solid 2px gray;
        width: 20px;
        left: -10px;
        background-color: var(--color_background_VeryLight);
        cursor: row-resize;
        &:hover{
          border-color: var(--color_hoverAction);
        }
        &.dragging{
          border-color: var(--color_hoverAction);
          > .filterRangeValue{
            color: var(--color_hoverAction);
            font-weight: 500;
          }
        }
        > .filterRangeValue{
          font-size: 0.8em;
          font-weight: 300;
          width: 100%;
          display: block;
          text-align: center;
          &:hover{
            color: var(--color_hoverAction);
            font-weight: 500;
          }
          &.filterRangeValue_max{
            position: absolute;
            top: -1.3em;
            cursor: n-resize;
          }
          &.filterRangeValue_min{
            position: absolute;
            bottom: -1.3em;
            cursor: s-resize;
          }
        }
      }
      .timeSelectArea{
        display: block;
        top: 0%;
        height: 100%;
        position: absolute;
        background-color: var(--color_background_VeryLight);
        opacity: 0;
        width: 20px;
        left: -10px;
        cursor: ns-resize;
        transition: var(--transition_opacity);
        pointer-events: none;
        &:hover{ opacity: 0.75; }
      }
      .tickText > .clearFilterButton{
        position: absolute;
        width: 14px;
        height: 16px;
        font-size: 0.8em;
        line-height: 10px;
        left: -14px;
        top: 0px;
        cursor: pointer;
      }

      .tickText > .openTimepointSummary{
        position: absolute;
        right: -13px;
        top: 2px;
        width: 12px;
        height: 12px;
        font-size: 0.9em;
        color: gray;
        cursor: pointer;
        opacity: 0;
        transition: var(--transition_opacity);
        &:hover{ color: var(--color_hoverAction); }
      }
      .tickText:hover > .openTimepointSummary{
        opacity: 1;
      }

      .tickText.tickText_2{
        left: auto !important;
        right: var(--width_scatter_margin_left);
        text-align: left !important;
      }
      .recordAxis_X {
        .tickText{ 
          font-weight: 300;
          font-size: 0.9em;
        }
      }
      .timeLimit{
        position: absolute;
        top: -1.2em;
        cursor: pointer;
        font-size: 1.4em;
        color: gray;
        > select{
          opacity: 0;
          position: absolute;
          cursor: pointer;
          &:hover + .fa{
            color: var(--color_hoverAction);
          }
        }
        > .clearLimit{ 
          display: none;
          position: absolute;
          font-size: 0.7em;
          top: 6px;
          opacity: 0;
          transition: all 250ms;
          &:hover{ color: var(--color_hoverAction); }
        }
        &.timeLimit-min{
          left: -15px;
          > .fa-angle-double-right{ display: inline; }
          > select { left: 0px; }
          > .clearLimit{ left: -1em; }
        }
        &.timeLimit-max{
          right: -15px;
          > .fa-angle-double-left{ display: inline; }
          > select { right: 0px; }
          > .clearLimit{ right: -1em; }
        }
        &.filtered{
          > .clearLimit{ display: inline-block; }
        }
        &:hover{
          > .clearLimit{ opacity: 1; }
        }
      }
      .hmTicks.isFiltered {
        > .tickText{ 
          font-weight: 500;
          > .clearFilterButton{ opacity: 1; pointer-events: all; }
          > .theTextText{
            background-color: var(--color_background_VeryLight);
            padding: 0px 2px;
            border: solid 1px var(--color_filter_clear);
          }
        }
        > .filterArea{ display: block; }
      }
    }
  }

  &.showDropZone{

    .panelEmpty,
    .configPanel{
      display: none !important;
    }

    .panel{
      width: auto !important;
    }

    .panel_Wrapper{
      grid-template-columns: 30% calc(~'40% - 2*var(--panelGapSize)') 30% !important;
    }

    .panel.panel_side{
      margin-top: -8px;
    }

    .middleColumn{
      margin-right: initial !important;
      margin-left: initial !important;
    }

    &:not([dropattrtype~="unique"]){
      .kshfSummary{
        flex-grow: 0;
        flex-shrink: 0;
        flex-basis: 30px !important;
        overflow: hidden;
        margin-bottom: 0px;
        > .wrapper{
          opacity: 0;
        }
        > .headerGroup > .iconGroup{ display: none !important; }
      }

      .panels_Above{
        flex: 2;
      }
      .panel{
        > .dropZone{ 
          flex: 1 0 auto;
          visibility: visible;
          margin: 8px 0;
        }
        &.panel_middle{ flex: 1; }
        &.panel_bottom{
          &.hasBlocks {
            flex: 1;
          }
          > .dropZone{
            min-height: 80px;
          }
        }

        &.panel_side:not(.hasBlocks){ 
          z-index: 300;
          transition: width 300ms ease-in-out;
          &:hover{ width: 200px; }
        }
      }
    }

    .recordDisplay{
      flex-grow: 1 !important;
      width: auto !important;
      min-height: 150px;
      max-height: 150px;

      .timeAnimation,
      .recordDisplayConfig
      .recordDisplayWrapper{
        display: none !important;
      }
    }

    &[recordChartType="none"] .recordDisplay{
      display: block;

      .recordDisplayHeader{
        display: none !important;
      }
    }
    &:not([recordChartType="none"]) .recordDisplay{
      pointer-events: none;
      .textSearchInput{ pointer-events: none !important; }
      > .dropZone,
      .visViewControl,
      .mapGlyphColorSetting{
        display: none !important;
      }
    }
  }

  span.unitName{
    margin-left: 1px;
    margin-right: 1px;
    opacity: 0.6; //color: gray;
  }

  .fa-dropbox{ color: #007EE5 !important; }

  .sortButton{
    display: none;
    cursor: pointer;
    &:hover{ color: var(--color_hoverAction); }
    > .fa:before{ content: "\f161"; } // decreasing
    &.sortInverse > .fa:before{ content: "\f160"; } // increasing
  }

  // Used only in breadcrumbs
  .AndOrNot{
    display: inline-block;
    pointer-events: none;

    color: white;
    font-weight: 400;
    padding: 1px 3px;
    opacity: 0.7;
    font-size: 0.8em;
    vertical-align: top;
    border-radius: 4px;
    margin: 1px;
    &:hover { opacity: 1 }
    transition: var(--transition_opacity);
  }
  .AndOrNot_And{ background-color: var(--color_query_and); }
  .AndOrNot_Or { background-color: var(--color_query_or ); }
  .AndOrNot_Not{ background-color: var(--color_query_not); }

  // > .mainWrapper{
  //   flex: 1 0 auto;

  //   display: grid;
  //   grid-template-columns: auto minmax(0, 1fr);
  //   grid-template-rows: auto minmax(0, 1fr);
  //   grid-template-areas:
  //     "panelAuthoring panelDataStatus"
  //     "panelAuthoring panelData";
  //   position: relative;

  //   overflow: hidden;

    // > .panel_Data_Wrapper{
    //   grid-area: panelData;
    //   display: flex;

    //   padding: var(--panelGapSize);
    //   background-color: #f2f2f2;
    //   // This setup allows overflowing dashboards, which can be useful in future.
    //   overflow-y: hidden; // change to auto when content may overflow.
    //   overflow-x: hidden;

      > .panel_Wrapper{
        grid-area: panelData;
        background-color: #f2f2f2;
        padding: var(--panelGapSize);

        //flex: 1;
        display: grid;
        grid-template-columns: auto 1fr auto;
        grid-template-rows: minmax(0, 1fr) auto;
        grid-template-areas:
          "panelLeft panelMiddle panelRight"
          "panelBottom panelBottom panelBottom";
        grid-gap: var(--panelGapSize);
        position: relative;
        //height: 100%;
        z-index: 10;
        &.panel_bottom_empty{
          padding-bottom: 0px;
        }
      }

    //}
  //}


  .authoringPanel{
    grid-area: panelAuthoring;
    display: none;
    flex-direction: column;

    width: 250px;
    z-index: 999;

    .attributePanelFilters{
      margin: 4px;
      display: flex;
      .filterTypeButton{
        display: flex;
        align-items: center;
        align-self: flex-end;
        flex-direction: column;
        justify-content: center;
        border-radius: 3px;
        width: 1.5em;
        height: 1.5em;
        margin: 2px;
        text-align: center;
        color: var(--color_background_Dark);
        cursor: pointer;
        user-select: none;
        &:hover{ color: var(--color_hoverAction); }
      }
      > .attribTextSearchIcon{
        &.active{
          background-color: var(--color_background_VeryLight);
          color: var(--color_hoverAction);
        }
      }
      > .dataTypeFilters{
        flex: 1;
        display: flex;
        align-content: flex-start;
        align-items: center;
        flex-wrap: wrap;
        > .filterTypeButton{
          background-color: var(--color_background_Light);
          &.hidden{
            display: none;
          }
          &.active{
            border: solid 1px black;
            color: var(--color_hoverAction);
          }
        }
      }
    }

    > .authoringPanelHeader{
      border-bottom: double 7px #bdb6aa;
      background-color: #efeadf;
      margin-bottom: 3px;
      font-family: "Roboto Slab";
      font-weight: 700;
      color: #635d46;
      cursor: default;
      height: 27.5px;
      padding: 0px 3px;
      > .fa-times-rectangle{
        float: right;
        cursor: pointer;
        padding-top: 2px;
        &:hover{ color: var(--color_hoverAction); }
      }
    }

    > .sidePanelGroup{
      min-height: 22px;
      transition: flex 750ms ease-in-out;
      > .sidePanelGroupHeader{
        font-family: "Roboto Slab", serif;
        color: white;
        font-weight: 400;
        cursor: default;
        text-align: left;
        background-color: var(--color_background_Dark);
        padding: 8px 6px 7px; // 7px to match the data staatus panel height by default
        border-right: solid 1px var(--color_axis_line);
        > .closeAttribPanel{
          float: right;
          color: var(--color_background_VeryLight);
          cursor: pointer;
          display: block;
          transition: all 250ms;
          opacity: 0;
          &:hover{ color: var(--color_hoverAction); }
        }
        .fa-cube{
          width: 20px;
          text-align: center;
        }
      }
      &:hover{
        > .sidePanelGroupHeader > .closeAttribPanel{
          opacity: 1;
        }
      }
      &.collapsed {
        .sidePanelGroupContent{ display: none; }
        .fa-compress{ display: none }
        flex: 0;
        > .sidePanelGroupHeader{
          cursor: pointer;
        }
      }
      &:not(.collapsed){
        .fa-expand{ display: none }
        flex: 1;
      }
    }

    > .bookmarkPanel{
      display: flex;
      flex-direction: column;
      flex: 1;
      > .sidePanelGroupContent{
        flex: 1 1 auto;
        height: 0px; // weird firefox bug fix
        overflow: auto;
      }
    }

    > .attributePanel{
      display: flex;
      flex-direction: column;
      > .sidePanelGroupContent{
        display: flex;
        flex-direction: column;
        flex: 1 1 auto;
        height: 0px; // weird firefox bug fix
        border-right: solid 1px var(--color_axis_line);
        position: relative;
        > .panelAdjustWidth{
          right: -6px;
        }
      }

      .attributePanelControl{
        display: flex;
        flex-direction: row;
        padding: 4px;
        border-style: solid;
        border-color: var(--color_background_Light-darken-15);
        border-width: 1px 0px 0px;
        display: none;
        &.active{ display: block; }
        > .attribTextSearch{
          flex: 1;
          position: relative;
          top: -2px;
          > .textSearchInput{
            width: calc(~"100% - 15px");
          }
        }
      } // attributePanelControl

      .attributeList{
        display: flex;
        flex-direction: column;
        flex: 1;
        justify-content: flex-start;
        overflow: hidden;
        border-top: solid 1px var(--color_axis_line);
        &:hover{
          overflow: auto;
        }
        .AttribListItem{
          > .subItems{
            margin-left: 1.2em;
          }
          &.collapsed {
            > .nugget > .groupControl > .fa{
              transform: rotate(-90deg);
            }
            > .subItems{
              .nugget{ height: 0px; padding: 0px; opacity: 0; }
              //display: none;
            }
          }
          &.hasSubItems{
            > .nugget{
              cursor: default;
            }
          }
          &:not(.hasSubItems){
            > .nugget > .groupControl{ visibility: hidden; }
          }

        }
        .subItems > .AttribListItem{
          border-left: solid 1px lightgray; // not on top-level
        }
      }
    }

    .boostButton{
      text-align: center;
      opacity: 0;
      transition: var(--transition_opacity);
      border-radius: 3px;
      background-color: white;
      border: solid 1px gray;
      cursor: pointer;
      color: var(--color_background_Dark);
      font-size: 1em;
      margin: 2px;
      overflow: hidden;
      &:hover{
        border-color: var(--color_hoverAction);
        background-color: var(--color_hoverAction);
        color: white;
      }
      &.hint{
        display: block;
      }
      &.animate{
        > .fa-rocket-launch{ animation: rocketShoot 1.5s infinite ease-out; }
      }
    }
    &:hover .boostButton{
      opacity: 1;
    }


    .nugget{
      display: flex;
      flex-direction: row;
      position: relative;
      font-size: 0.8em;
      height: 2em;
      padding: 1px 0px;
      background-color: white;
      overflow: hidden;
      .cursorGrab();
      user-select: none;
      transition: var(--transition_opacity_slow), height 500ms, transform 400ms ease-in-out, all 250ms;
      &.filtered{
        display: none;
      }
      &.condensedText{
        font-family: "Roboto Condensed", sans-serif;
      }
      &.inDashboard{
        background: linear-gradient(-90deg, rgba(235,235,235,1) 0%, rgba(235,235,235,0) 100%);
        // just a little emphasis on the title
        > .summaryName{ font-weight: 400; }
      }
      > .groupControl{
        width: 0.8em;
        text-align: right;
        color: gray;
        cursor: pointer;
        align-self: center;
        &:hover{ color: var(--color_hoverAction); }
        > .fa{
          transition: all 500ms;
        }
      }
      > .nuggetIcon{
        display: flex;
        align-items: center;
        align-self: center;
        justify-content: center;
        border-radius: 1px;
        width: 1.1em;
        height: 1.5em;
        margin: 2px;
        color: var(--color_background_Dark);
        > .fa-line-chart{
          font-size: 0.9em;
        }
        > .fa-hashtag{
          font-size: 0.9em;
        }
        > .fa-circle{
          font-size: 0.7em;
          opacity: 0.6;
        }
      }
      > .summaryName{
        pointer-events: none;
        display: inline-block;
        margin: 1px;
        overflow-wrap: break-word;
        padding: 1px;
        align-self: center;
        flex: 1;
        font-weight: 300;
        font-size: 1.1em;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        &:hover{
          white-space: normal;
        }
      }
      .iconWrapper {
        display: none;
        align-self: center;
        > .fa, >.far{
          color: gray;
          cursor: default;
          width: 1em;
          text-align: center;
          transition: all 250ms;
          opacity: 1;
          &.summaryDescription{  display: none; }
          &.summaryMultiCat{ display: none; }
          &.showDeriveMenu{
            cursor: pointer;
            &:hover{ color: var(--color_hoverAction); }
          }
          &.active{ display: inline-block; }
        }
      }
      
      .nuggetInfo{
        align-self: center;
        flex: 1;
        width: 100%;
        display: inline-block;
        font-weight: 300;
        font-size: 0.7em;
        font-family: "Roboto Condensed", sans-serif;
        vertical-align: top;
        text-align: center;
        > .num_left{
          float:left;
          margin-left:2px;
        }
        > .num_right{
          float:right;
          margin-right:2px;
        }
        > .fa{ color: gray; }
      }
      &.filtered{ display: none; }
      &.hidden{ display: none; }

      .summaryRecordIDIcon{
        display: inline-block;
      }

      &:hover{
        background-color: var(--color_background_VeryLight);
        border-color: gray;
        .iconWrapper{
          display: block;
        }
      }
      &.popupVisible{
        .iconWrapper{
          display: block;
        }
      }
      &[datatype~="interval"]{
        &[datatype~="timekey"]{
          .showDeriveMenu{ display: none !important; }
          .summaryName{ pointer-events: none !important; } // avoid changing name
        }
        .nuggetChart{ order: 1; }
        .nuggetInfo{ order: 2; max-height: 1em; }
      }
      &[datatype~="categorical"][datatype~="singlevalue"]:hover{
        .splitCatAttribute_Button{ display: inline-block; }
      }
      &[moved]{ opacity: 0.5 !important; }
      &[anim="disappear"]{
        opacity: 0;
        transform: translateX(100px);
      }
      &[anim="appear"]{
        opacity: 1;
        transform: translateX(0px);
      }
    } // .nugget
  } // .authoringPanel

  pre.embedCode{
    text-align: left;
    line-height: 1em;
    padding: 10px;
    border: solid 1px lightgray;
    white-space: pre-wrap;
    word-wrap: break-word;
    max-width: 600px;
  }

  .copyEmbedCode{
    cursor: pointer;
    text-decoration: underline;
    &:hover{ color: var(--color_hoverAction); }
  }

  .recordInfo{
    flex: 0 2 auto; // do not expand, but can shrink
    white-space: normal;
    align-self: center;
    text-align: center;
    display: block;
    position: relative;
    user-select: none;
    cursor: default;
    font-size: 1.2em;
    font-weight: 500;
    z-index: 10;
    margin: 0px 2px;
    font-family: "Roboto Slab";
    > .activeRecordMeasure{
      display: inline-block;
      text-align: right;
      margin-right: 5px;
      > .unitName{ font-weight: 400; }
    }
    > .metricFuncText{ 
      font-weight: 300;
      margin-right: 5px;
      > .metricOptionWrapper{
        //padding-right: 5px;
        display: inline-block;
        position: relative;
        cursor: pointer;
        overflow: hidden;
        vertical-align: top;
        &:hover{
          > .metricOptionWrapper_Text{ 
            border-color: white;
            text-decoration: none;
          }
        }
        &.hide{
          display: none;
        }
        > .metricOptionWrapper_Text{
          cursor: pointer;
          pointer-events: none;
          line-height: 1.2em;
          font-size: 0.9em;
          z-index: 2;
          padding: 1px 3px;
          border: solid 1px rgba(1,1,1,0);
          display: inline-block;
          text-decoration: underline;
          transition: linear 200ms;
          &.measureFuncText{
            padding-left: 0px;
          }
          > .blockName_Path > .fa{
            padding: 0 4px;
            //text-decoration: underline;
          }
          &:after{
            .kshf-fa();
            content: "\f107";
            padding-left: 0.1em;
            text-decoration: none;
            display: inline-block;
            font-weight: 300;
          }
          > .fa{
            font-size: 0.8em;
            position: relative;
            top: -0.1em;
          }
        }
        > select{
          position: absolute;
          top: 0.15em;
          left: 0px;
          z-index: 1;
          cursor: pointer;
          vertical-align: middle;
          font-size: 0.7em;
          border-color: #999;
          opacity: 0;
          outline: none;
        }
        &.timeKey{
          .fa-calendar-o{ margin-right: 4px; }
        }
      }
    }
    > .recordName{
      white-space: nowrap;
      pointer-events: none;
      cursor: text;
      &:hover{
        outline: solid 1px var(--color_hoverAction);
        color: var(--color_hoverAction);
      }
      &:focus{
        background-color: white;
        color: var(--color_hoverAction);
        outline: none;
        border-radius: 3px;
        text-decoration: underline;
      }
    }
  }

  .BookmarkInfo{
    padding: 5px;
    font-weight: 300;
    font-size: 0.9em;
    text-align: center;
    .fa{ color: gray; font-size: 0.9em; padding: 0px 3px;}
  }
  .signInCall{
    padding: 5px;
    font-weight: 300;
    font-size: 0.9em;
    text-align: center;
    > .signInCall-Action{
      font-weight: 500;
      text-decoration: underline;
      cursor: pointer;
      &:hover{ color: var(--color_hoverAction); }
    }
  }
  .showLoading{
    > .loadingAnimation{ display: block; }
  }
  .loadingAnimation{
    display: none;
    height: 4em;
    padding: 1em;
    color: gray;
    text-align: center;
  }
  .BookmarkList{
    flex: 1;
    border-spacing: 0px;
    border-collapse: separate;
    font-weight: 300;
    //background-color: white;
    overflow-x: auto;
    overflow-y: hidden;
    white-space: nowrap;
    .HeaderRow{
      background-color: #ebe5df;
      display: none; // hidden by default
    }
    > .showIfNoBookmarks{
      display: none;
      color: gray;
      cursor: default;
      white-space: pre-line;
      text-align: center;
      padding: 0px 2em;
      line-height: 2em;
      transition: all 300ms;
    }
    &.noBookmarks{
      display: flex;
      align-items: center;
      justify-content: center;
      > .showIfNoBookmarks{ display: block; }
      &:hover > .showIfNoBookmarks{
        text-shadow: 0px 0px 10px white, 0px 0px 10px white, 0px 0px 5px white, 0px 0px 5px white;
      }
    }
    > .kshfBookmarkBlock{
      display: inline-block;
      background-color: white;
      height: calc(~"100% - 10px");
      max-width: 250px;
      border-width: 0px;
      margin: 5px 10px;
      box-shadow: 0px 0px 2px grey;
      padding: 3px;
      vertical-align: top;
      &:hover{ box-shadow: 0px 0px 3px black; }
    }
  }

  .googleLoginStuff{
    margin: 10px 0px;
    font-weight: 300;
    font-size: 1.2em;
    > .googleLoginStuffHeader{
      display: none;
      margin-right: 5px;
    }
    > .SheetSelector{
      display: none;
      max-width: 250px;
      font-size: 0.8em;
      vertical-align: top;
    }
    > .signInToGoogle{
      display: inline-block;
      cursor: pointer;
      margin: 0px 10px;
      border: solid 1px lightgray;
      box-shadow: 0px 2px 4px lightgrey;
      border-radius: 5px;
      padding: 5px 10px;
      &:hover{ color: var(--color_hoverAction); }
    }
  }

  .configPanel{
    position: absolute;
    top: 0px;
    z-index: 1049;

    opacity: 0;
    pointer-events: none;
    background-color: white;
    //font-size: 0.9em;
    box-shadow: 2px 2px 6px var(--color_background_Dark);
    transition: box-shadow 150ms, opacity 500ms;

    font-size: 0.9em;

    &.active{ 
      pointer-events: all;
      opacity: 1;
    }

    &.compact{
      > .popupPanel_Content{
        max-height: 100px;
        overflow: auto;
      }
      .compactSizeControl{
        transform: scaleY(-1);
      }
    }

    &.summaryConfig{
      top: auto;
      right: auto;
      margin: 2px;
      padding: 4px;
      &.compact{
        max-height: 150px;
        overflow: hidden auto;
      }
      > .compactSizeControl{
        color: gray;
      }
      > .configClose{
        color: gray;
        &:hover{ color: var(--color_hoverAction); }
      }
      &.onBottom{ top: 100%; right: 0px;}
      &.onTop{ bottom: 100%; right: 0px;}
      &.onRight{ left: 100%; top: 0px;}
      &.onLeft{ right: 100%; top: 0px;}
    }

    > .popupPanel_Header{
      font-family: "Roboto Slab", serif;
      font-weight: 500;
      font-size: 1.1em;
      line-height: 1em;
      white-space: nowrap;
      text-align: center;

      padding: 4px 2px;
      background-color: var(--color_background_Dark);
      color: white;

      border-bottom: solid 1px gray;
      .cursorGrab();
      user-select: none;
    }
    &:hover{ box-shadow: 0px 0px 12px var(--color_background_Dark); }

    .compactSizeControl{
      position: absolute;
      top: 4px;
      left: 4px;
      color: white;
      cursor: pointer;
      &:hover{ color: var(--color_hoverAction); }
    }

    > .popupPanel_Content{
      overflow: hidden;
      display: block;
      position: relative;
      padding: 4px 8px 8px 8px;

      .dashboardConfigOption{
        margin-bottom: 0.9em;
        margin-top: 0.2em;
        &:hover .configOption-Info{ color: gray; }
        > select{
          font-size: 0.9em;
        }
      }
      .aggrMetricSummaries{
        display: inline-block;
        margin: 0px 4px;
      }
      .aggrMetricSummaries_Detail{
        display: none;
        margin: 0px 4px;
        &.active{ display: inline-block; }
      }
      .dashboardConfigOptionHeader{
        display: inline-block;
        width: 150px;
        text-align: right;
        font-weight: 500;
        cursor: default;
        vertical-align: middle;
      }
      .dashboardConfigOptionIcon{
        color: gray;
        width: 20px;
        margin-left: 5px;
        text-align: center;
      }
    }

    > .configClose{
      position: absolute;
      top: 4px;
      right: 4px;
      font-size: 1.1em;
      cursor: pointer;
      color: var(--color_background_VeryLight);
      &:hover{ color: white; } // this has dark background already
    }
  }

  .blockName{
    > .blockName_Path{
      display: inline-flex;
      align-items: center;
      .fa-caret-right{
        color: gray;
        width: 0.4em;
        cursor: pointer;
        margin: 0px 3px 0px 4px;
        &:hover{ color: var(--color_hoverAction); }
      }
      > .groupName{ display: none; }
      &.visible{
        min-width: 16px;
        > .groupName{ 
          display: inline-block;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
      }
    }
    > .blockName_Print{
      font-weight: 700;
      display: inline-block;
    }
  }

  .kshfSummary_Categorical{
    .summaryLockButton{ 
      visibility: visible;
      height: 16px;
      width: 16px;
    }
    &:hover .summaryLockButton{ opacity: 1; }
    .noValueAggr{ bottom: 20px; }
  }

  .kshfSummary.lockedAttrib .summaryLockButton{
    opacity: 1;
    visibility: visible;
    background-color: var(--color_Compare_A);
    color: white;
    font-size: 0.7em;
    &:hover{
      &:before{ content: "\f00d";  } // cross
    }
  }

  .breadCrumbs{
    display: flex;
    flex-wrap: wrap;
    justify-content: left;
    align-items: center;
    margin: 1px 3px;
    vertical-align: top;
    font-size: 0.9em;
    cursor: default;
    white-space: nowrap;
    background: white;
    color: #252112;
    // position: relative; // DO not. This breaks detecting wraps across filter & compare combined
    > .breadCrumb{
      cursor: pointer;
      &:hover{ .styleGroupBreadCrumbHover(); }
    }

    > .breadCrumbCollapseControl{
      padding-right: 4px;
      color: #252112;
      cursor: pointer;
      &:before{ display: block; transition: all 250ms; }
      &:hover{  color: var(--color_hoverAction); }
      &:hover:before{ transform: scaleX(-1); }
    }

    &.collapsed{
      > .breadCrumb{ display: none; }
      > .breadCrumbHeader{ pointer-events: none; } // Cannot remove all filters when collapsed
      > .breadCrumbCollapseControl:before{ transform: scaleX(-1); }
      > .breadCrumbCollapseControl:hover:before{ transform: scaleX(1); }
    }

    > .breadCrumbHeader{
      padding: 2px 4px;
      white-space: nowrap;
      font-weight: 600;
      cursor: pointer;
      user-select: none;
      &:after{
        content: ":";
        padding-left: 1px;
      }
      &:hover{
        color: var(--color_hoverAction);
        text-decoration: line-through;
        ~ .blockName{
          color: var(--color_hoverAction);
        }
        ~ .breadCrumb{
          .styleGroupBreadCrumbHover();
        }
      }
    }

    &:not(.isActive) {
      > .breadCrumbHeader, > .breadCrumbCollapseControl {display: none; }
    }
  }
  .saveSelection{
    display: none;
    cursor: pointer;
    color: gray;
    height: 1em;
    font-size: 1.1em;
    margin: 3px 0px;
    vertical-align: top;
    &[active=true]:hover{ color: var(--color_hoverAction); }
    &[active=true]{ display: inline-block; }
  }

  .dashboardSetting{
    display: flex;
    flex-wrap: wrap;
    justify-content: left;
    align-items: center;
    padding: 3px;
    margin: 3px;
    vertical-align: top;
    cursor: pointer;
    background: white;
    &.breakdownModeIcon{
      color: var(--color_background_Dark);
      &:before{
        display: block;
        height: 1em;
        width: 1em;
        text-align: center;
      }
      &:hover{
        color: var(--color_hoverAction);
      }
    }
    &.lockCrumbMode{
      &:hover{ border-color: var(--color_hoverAction); }
      &[disabled]{
        pointer-events: none;
        color: gray;
      }
    }
  }

  .breadCrumbs_Compare{
    .lockCrumbSummary{
      padding-right: 2px;
      padding-left: 3px;
      max-width: 350px;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
    .crumbHeader{ display: none !important; }
  }

  .styleGroupBreadCrumbHover{
    > .crumbText{ 
      color: var(--color_hoverAction);
      > .crumbDetails { text-decoration: line-through; }
    }
    > .breadCrumbIcon {
      > .fa-filter{ display: none;} 
      > .fa-times{ display: block; }
    }
  }

  .bookmarkButton{
    &::before{ content: "\f097"; } // bookmark-o
  }

  .panel_Footer{
    grid-area: panelFooter;
    display: flex;
    flex-direction: row;
    flex: 0 0 auto;

    overflow: hidden;
    width: 100%;
    
    //background-color: rgba(211, 211, 211, 0.15);
    background-image: -webkit-linear-gradient(bottom, rgb(235, 235, 235) 0%, rgba(255,255,255,0) 80%);
    background-image: -moz-linear-gradient(bottom, rgb(235, 235, 235) 0%, rgba(255,255,255,0) 80%);
    background-image: -o-linear-gradient(bottom, rgb(235, 235, 235) 0%, rgba(255,255,255,0) 80%);
    background-image: linear-gradient(to top, rgb(235, 235, 235) 0%, rgba(255,255,255,0) 80%);

    border-top: solid 1px lightgray;

    font-size: 1.0em;
    color: var(--color_darkGrayBackground);
    white-space: nowrap;

    > .dashboardModeSelect{
      display: flex;
      align-items: center;
      > .dashboardModeSelectTitle{
        padding: 0px 8px;
        font-family: "Roboto Slab";
        background-color: var(--color_background_Dark);
        color: white;
        height: 100%;
        font-weight: 600;
        user-select: none;
      }
      > .dashSelectMode{
        display: flex;
        cursor: pointer;
        align-items: center;
        height: 100%;
        > .fa, > .far, > .fal{
          width: 1.6em;
          font-size: 0.7em;
          height: 1em;
          text-align: center;
        }
        > .theText{ 
          padding-right: 6px;
          font-weight: 300;
        }
        &.active {
          background-color: var(--color_hoverAction);
          color: white;
          pointer-events: none;
          > .theText{ display: block; }
        }
        &:hover{
          color: var(--color_hoverAction);
        }
        &.dashSelectMode-Save{
          display: none;
        }
      }
    }

    > .browserDescription{
      flex: 1;
      display: inline-flex;
      align-items: center;
      justify-content: center;

      font-weight: 300;
      font-size: 0.8em;
      padding: 3px 5px;
      cursor: default;

      > a{
        color: gray;
        font-size: 1em;
        &:hover{ color: var(--color_hoverAction); }
      }
      > .customDescription{
        display: none;
        border-right: solid 1px lightgray;
        color: black;
        padding: 0px 5px;
        > .customDescriptionButton{ 
          color: gray;
          margin-right: 2px;
          cursor: pointer;
          pointer-events: none;
          &:hover{ color: var(--color_hoverAction); }
        }
        > .customDescriptionText{
          > a{
            color: black;
            font-size: 1em;
          }
        }
      }
    }
    > .fa{
      cursor: pointer;
      margin-left: 4px;
      &:hover{ color: var(--color_hoverAction); }
    }

    > .bookmarkButton{
      display: none;
    }
    .datasource{
      display: none;
      text-decoration: none;
      padding-right: 5px;
      border-right: solid 1px lightgray;
      vertical-align: top;
    }
    .DataPrivacy{
      display: none;
      width: auto;
      font-size: 1em;
      padding: 0px 5px;
      margin: 0px;
      border: none;
      border-right: solid 1px lightgray;
      border-radius: 0px;
    }
    .SourceCustomQuery{
      margin: 0px 5px;
    }
    .DataOwner{
      padding: 0px 5px;
      color: gray;
      text-decoration: none;
    }
    .deleteDataset{
      cursor: pointer;
      color: gray;
      font-size: 0.9em;
      margin: 0px 3px;
      &:hover{ color: var(--color_hoverAction) !important; }
    }
    > .logoHost{
      margin: 0 4px;
      height: 1.3em;
      cursor: pointer;
      width: 115px;
      font-weight: 300;
      text-align: right;
      position: relative;
      transform: translateY(0);
      transition: all 300ms ease-in-out;
      > .keshifSVG{ 
        display: block;
        opacity: 1; // animated on hover
        transition: var(--transition_opacity);
        font-family: 'Roboto';
        > img{
          height: 1em;
          position: relative;
          top: 2px;
          margin-left: 3px;
          content: url('./assets/img/keshif.svg')
        }
      }
      > .theDataMadeExplorable{
        display: block;
        opacity: 0;
        font-size: 0.8em;
        font-family: "Roboto Condensed", sans-serif;
        transition: var(--transition_opacity);
      }
    }
    &:hover {
      .deleteDataset{ color: black; }
      a{ color: black; }
      > .logoHost { 
        transform: translateY(-1.1em);
        > .theDataMadeExplorable{ opacity: 1;}
      }
    }
  }

  .showHelpIn{ 
    display: none;
  }

  .panel_DataStatus{
    grid-area: panelDataStatus;
    display: flex;
    flex-direction: row;
    z-index: 99;
    padding: 4px;

    position: relative;
    background-color: var(--color_background_Dark);
    //background: linear-gradient(0deg, rgba(56,64,76,0.5914740896358543) 0%, var(--color_background_Dark) 10%, var(--color_background_Dark) 100%);

    color: white;

    > .panel_Basic_In{
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      flex: 1 1 auto;
      align-self: center;
      position: relative;
    }

    > .iconGroup {
      flex: 0 5 auto; // a bit more aggressive shrinking approach
      min-width: 1.5em; // in case the layout tries to shrink it too much
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      align-content: start;
      justify-content: center;
      &.rightSideIcons{
        flex-direction: row-reverse;
      }
      &.dashboardSettings{
        align-self: center;
      }
    }

    .basicIcon {
      color: white;
      margin: 5px 3px;
      cursor: pointer;
      align-self: flex-start;
      &:hover{ color: var(--color_hoverAction); }
    }
  }

  .panels_Above{
    display: flex;
    flex-direction: row;
    position: relative;
    flex: 1;
  }

  .attribDragBox{
    position: absolute;
    top: 0px;
    left: 0px;
    padding: 4px;
    // height: 22px; // auto... (based on text within)
    width: 200px;
    background-image: linear-gradient(to right, rgba(245, 245, 245, 1) 0%, rgba(241, 241, 241, 1) 20%, rgba(241, 241, 241, 1) 80%, rgba(245, 245, 245, 1) 100%);
    //background-color: lightgray;
    border-radius: 3px;
    border: solid 1px lightgray;
    box-shadow: 5px 5px 20px gray;
    display: none;
    z-index: 4000;
    text-align: center;
    font-weight: 500;
    font-size: 0.9em;
    cursor: default;
    text-rendering: initial;
    pointer-events: none;
  }

  > .warningBox_wrapper{
    position: absolute;
    margin: 0 auto;
    width: 100%;
    text-align: center;
    z-index: 100;
    opacity: 0;
    top: -20px;
    pointer-events: none;

    transition: var(--transition_opacity_slow), top 500ms;
    > .warningBox{
      display: inline-block;
      background-color: #F8EE82;
      font-size: 0.8em;
      font-weight: 300;
      padding: 10px 20px;
      border: solid 1px darken(#F8EE82, 50%);
      position: relative;
      > .warningText{
        cursor: default;
        line-height: 1.7em;
        > .link{
          text-decoration: underline;
          cursor: pointer;
          color: #665F17;
          font-weight: 600;
          padding: 2px 6px;
        }
      }
      > .dismiss{
        position: absolute;
        top: 3px;
        right: 3px;
        font-size: 1.1em;
        color: #464109;
        cursor: pointer;
        &:hover{ color: var(--color_hoverAction); }
      }
    }
    &.active{
      opacity: 1;
      top: 0px;
      > .warningBox{
        pointer-events: all;
      }
    }
  }

  > .pointerBlock{
    position: fixed;
    left: 0px;
    top: 0px;
    width: 100%;
    height: 100%;
    z-index: -10;
    pointer-events: none;
    &[active]{
      z-index: 700;
      pointer-events: all;
    }
  }

  .CompareModeIcon{
    display: inline-block;
    vertical-align: top;
    width: 1em;
    height: 1em;
    position: relative;
    filter: grayscale(0.3);
    > .CompareModeIcon-block{
      position: absolute;
      outline: solid 0.5px white;
      transition: all 500ms;
      &:nth-child(1){ background-color: var(--color_Compare_A); }
      &:nth-child(2){ background-color: var(--color_Compare_B); }
      &:nth-child(3){ background-color: var(--color_Compare_C); }
    }
  }

  .dashboardConfigOption{
    .CompareModeIcon{
      filter: grayscale(0.8);
    }
  }

  &.stackedCompare{
    [id^="kshfLineChartTip_"]{ fill: white; }
    [id^="kshfLineChartTip_"] > circle{ r: 4px; }

    .CompareModeIcon-block{
      width: 100%;
      left: 0%;
      &:nth-child(1){
        bottom: 0%;
        height: 20%;
      }
      &:nth-child(2){
        bottom: 20%;
        height: 50%;
      }
      &:nth-child(3){
        bottom: 70%;
        height: 30%;
      }
    }
  }
  &:not(.stackedCompare){
    #kshfLineChartTip_Compare_A{ fill: var(--color_Compare_A); }
    #kshfLineChartTip_Compare_B{ fill: var(--color_Compare_B); }
    #kshfLineChartTip_Compare_C{ fill: var(--color_Compare_C); }
    #kshfLineChartTip_Compare_D{ fill: var(--color_Compare_D); }
    #kshfLineChartTip_Compare_E{ fill: var(--color_Compare_E); }
    [id^="kshfLineChartTip_"] > circle{ r: 4px; }

    .CompareModeIcon-block{
      width: 33%;
      bottom: 0%;
      &:nth-child(1){
        left: 0%;
        height: 40%;
      }
      &:nth-child(2){
        left: 33%;
        height: 100%;
      }
      &:nth-child(3){
        left: 66%;
        height: 60%;
      }
    }
    [scaletype="time"]{
      .measureLabel{
        // can appear inside chart, better to add some outline
        text-shadow: 0px 0px 1px white, 0px 0px 2px white, 0px 0px 4px white;
      }
    }
  }

  .breadCrumb{
    display: inline-block;
    position: relative;
    color: rgb(37, 33, 18);
    font-weight: 300;
    transition: var(--transition_opacity);
    > .crumbText{
      display: flex;
      white-space: nowrap;
      overflow: hidden;
      margin-left: 1em;
      margin-right: 1px;
      > .crumbHeader{
        padding: 0px 1px 0px 3px;
        font-weight: 600;
        display: inline-block;
        max-width: 350px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        vertical-align: top;
        &:after{ content: ":"; }
      }
      > .crumbDetails{
        display: inline-block;
        margin: 0px 2px;
        font-family: "Roboto Condensed", sans-serif;
        font-weight: 400;
        max-width: 350px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        vertical-align: top;
        > .AndOrNot{
          margin: 0px;
        }
        > .unitName{ font-weight: 300; }
      }
    }
    > .breadCrumbIcon{
      width: 1em;
      height: 1em;
      position: absolute;
      pointer-events: none;
      left: 0px;
      top: 1px;
      text-align: center;
      color: white;
      transition: var(--transition_bgcolor),
                  color 100ms linear, 
                  var(--transition_opacity_slow);
      > .fa-filter{
        font-size: 0.8em;
        position: relative;
        top: -0.05em;
      }
      > .fa-times{
        display: none;
      }
    }
    &.crumbMode_Filter {
      border: solid 2px white;
      > .breadCrumbIcon {
        background-color: var(--color_filter_clear);
        color: white;
      }
    }
    &[class*="crumbMode_Compare"] {
      margin: 2px;
      font-family: "Roboto Condensed", sans-serif;
      > .breadCrumbIcon > .fa-filter { display: none; }
    }
    &.crumbMode_Compare_A > .breadCrumbIcon { background-color: var(--color_Compare_A); }
    &.crumbMode_Compare_B > .breadCrumbIcon { background-color: var(--color_Compare_B); }
    &.crumbMode_Compare_C > .breadCrumbIcon { background-color: var(--color_Compare_C);  }
    &.crumbMode_Compare_D > .breadCrumbIcon { background-color: var(--color_Compare_D);  }
    &.crumbMode_Compare_E > .breadCrumbIcon { background-color: var(--color_Compare_E);  }
  }

  .colorBox{
    display: inline-block;
    width: 0.7em;
    height: 0.7em;
  }
  .bg_Active   { background-color: var(--color_bars) !important; }
  .bg_Other    { background-color: var(--color_bars) !important; } // from colorBox_Other
  .bg_Total    { background-color: var(--color_distr_total) !important; }
  .bg_Compare_A{ background-color: var(--color_Compare_A) !important; }
  .bg_Compare_B{ background-color: var(--color_Compare_B) !important; }
  .bg_Compare_C{ background-color: var(--color_Compare_C) !important; }
  .bg_Compare_D{ background-color: var(--color_Compare_D) !important; }
  .bg_Compare_E{ background-color: var(--color_Compare_E) !important; }

  .chartDescription{
    display: none;
    position: absolute;
    bottom: 5px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 400;
    transition: all 500ms ease-in-out;
    
    cursor: pointer;
    &.open{
      > .fa-comment{ display: none; }
      > .chartDescriptionText{ display: block; }
    }
    > .fa-comment{
      color: white;
      transition: all 300ms;
      text-shadow: 0px 0px 3px black;
      &:hover{ text-shadow: 0px 0px 3px #cb5454, 0px 0px 10px #cb5454, 0px 0px 1px #cb5454, 0px 0px 1px #cb5454; }
    }
    > .chartDescriptionText{
      background: white;
      box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);
      display: none;
      vertical-align: top;
      font-weight: 300;
      font-size: 0.9em;
      text-align: center;
      font-weight: 100;
      padding: 5px 10px;
      > b{
        font-weight: 400;
        display: inline-block;
      }
    }
  }


  .recordDetailTimeseries{
    height: 40px;
    overflow: visible;
    margin: 8px 30px 8px 0px;
    background-color: #F9F9F9;

    .extentValueGroup{
      > .extentText{
        font-size: 0.8em;
        font-weight: 100;
        text-anchor: start;
        dominant-baseline: central;
      }
      > .extentLine{
        stroke: lightgray;
        stroke-dasharray: 6 3;
      }
    }
    .extentYearGroup{
      display: none;
      user-select: none;
      cursor: default;
    }
    .extentYear{ 
      text-anchor: middle;
      font-size: 0.7em;
      font-weight: 100;
      opacity: 0;
      //&:last-child{ opacity: 0.8; }
      //&:nth-child(2n+0){ opacity: 0.8; }
    }

    .recordTimeseriesLine{
      fill: none;
      stroke: gray;
      stroke-width: 1.5;
    }
    .recordTimeseriesDot{
      //fill: lightgray;
      stroke: gray;
      cursor: pointer;
      transition: all 200ms;
      &:hover{ r: 5; }
      &.currentKey{
        r: 5;
        stroke: black;
        stroke-width: 1.5;
        &:focus{ outline: none; }
      }
    }
  }

  .panelEmpty{
    display: none;
    align-items: center;
    justify-content: center;
    position: absolute;
    width: 100%;
    height: 100%;
    > .actionInfo{
      pointer-events: none;
      font-weight: 300;
      color: black;
      opacity: 0.5;
      letter-spacing: 0.05em;
      line-height: 2em;
      text-align: center;
      transition: var(--transition_opacity);
      > .kshfLogo_K{
        height: 1.8em;
        margin: 1.2em;
        filter: grayscale(100%);
        opacity: 0.6;
      }
    }
    &:hover > .actionInfo{
      opacity: 1;
      > .kshfLogo_K{ filter: grayscale(0%);}
    }
  }

  .panelAdjustWidth{
    display: none;
    position: absolute;
    height: 100%;
    width: 0px;
    top: 0px;
    border-width: 0px 2px 0px 0px;
    border-style: dashed;
    border-color: gray;
    cursor: col-resize;
    opacity: 0.8;
    z-index: 10;
    pointer-events: all;
    &:hover, &.dragging{ 
      border-color: var(--color_hoverAction);
      border-right-width: 3px;
      border-style: solid;
    }
    &.dragging{ 
      display: block;
    }
  }

  .dropZone{
    display: flex;
    height: 100%;

    border: solid 1px var(--color_background_Dark);

    justify-content: center;
    align-items: center;

    z-index: 340;

    transition: var(--transition-flex-750ms), var(--transition_bgcolor), width 500ms ease-in-out;

    color: var(--color_background_Dark);
    > .dropZoneText{
      margin-left: 4px;
      font-weight: 500;
      font-family: "Roboto Slab", serif;
    }
    > .dropIcon{
      margin: 0.1em;
      pointer-events: none;
      font-size: 1.2em;
      width: 1.1em;
      height: 1.1em;
      // &:before{ content: "\f080"; } // bar chart // do not auto-apply. record display uses another icon
    }

    &:hover, &.onReadyToDrop{ 
      background-color: white;
      border-color: var(--color_hoverAction);
      //border-width: 4px;
      //border-style: double;
      cursor: s-resize;
      color: var(--color_hoverAction);
      > .dropZoneText{
        //font-weight: 700;
        text-decoration: underline;
      }
      > .dropIcon:before{
        content: "\f078";
      }
    }
  }

  .panel{
    > .dropZone{
      flex: 0 0 0px;
      margin: 0; // zero because if not zero, it can affect layout
      visibility: hidden;
      height: auto;
      cursor: default;
      &.onHover{
        flex-grow: 3 !important;
      }
    }
    &.hideCatBars { // modifier
      .kshfSummary_Categorical:not(.show_set_matrix){
        .summaryCategorical{
          .chartAxis_Measure,
          .measureGroup{ 
            display: none;
          }

          .catLabelGroup{
            text-align: left;
          }

          .catChart .hasLabelWidth{
            padding-left: 0.3em;
          }

          .catGlyph > .catLabelGroup > {
            .catLabelGap { order: 2; }
            .lockButton  { order: 4; }
            .filterButton{ order: 5; }
          }
        }
        .noValueAggr{
          left: auto;
          right: 0px;
        }
      }
      .catGlyph > [class^="measure_"]{ display: none; }
    }
    &.panel_bottom{
      grid-area: panelBottom;
      display: flex;
      flex-direction: column;
      width: 100%;
      position: relative;
    }
  }

  .panel_side{
    display: flex;
    flex-direction: column;
    z-index: 9;
    position: relative;
    height: 100%;
    min-height: 0px;
  }

  &:not(.showDropZone){
    .dropZone,
    .buttonSummaryOpen,
    .buttonSummaryExpand{ 
      display: none !important;
    }

    .panel_side.collapsed{
      //width: auto !important;
      width: 43px !important; // TODO: Need to set this. Otherwise, width is set to 0 pixels and panel gets invisible;
      //transform: rotate(-180deg);
      //flex-wrap: wrap;
      justify-content: flex-start;
      align-items: baseline;
      writing-mode: tb-lr;
      writing-mode: vertical-lr;
      flex-direction: row;
      overflow: auto;
      > .kshfSummary{
        flex-basis: auto !important;
        transform: rotate(180deg);
        .wrapper,
        .summaryConfig{
          display: none;
        }
      }
      .headerGroup{
        > .iconGroup{ flex-basis: 20px; min-height: 20px; }
        > .summaryNameWrapper{
          font-size: 0.9em;
        }
        .fa, .far, .fal{
          transform: rotate(90deg);
          margin-top: 2px;
          margin-bottom: 2px;
        }
      }
    }
  }

  .panel_left:not(.hasBlocks) ~ .middleColumn{
    margin-left: -8px;
  }
  .panel_right:not(.hasBlocks) ~ .middleColumn{
    margin-right: -8px;
  }

  .panel_left{
    grid-area: panelLeft;
    > .panelAdjustWidth{ right: -5px; }
    .kshfSummary_Categorical.show_set_matrix > .wrapper {
      border-right-color: rgba(1,1,1,0); // transparent
      border-right-width: 0px;
      .setMatrixLine{
        display: block;
      }
    }
  }
  .panel_right{
    grid-area: panelRight;
    > .panelAdjustWidth{ left: -5px; }
    .kshfSummary_Categorical.show_set_matrix > .wrapper {
      border-left-color: rgba(1,1,1,0); // transparent
    }
  }
  .panel_middle{
    order: 2; // in dom order, it appears first, but needs to appear below the record display
    grid-area: panelMiddle;
    display: flex;
    flex-direction: column;
    position: relative;
    vertical-align: top;
    position: relative;
    transition: var(--transition_all_750ms), width 0;
    &:not(.hasBlocks){ flex: 0; }
  }

  .panel_middle,
  .panel_bottom{
    .summaryViewAs.setMatrixButton{
      display: none !important;
    }
  }

  .kshfLogo{
    content: url('./assets/img/keshif.png');
  }

  .kshfLogo_K{
    content: url('./assets/img/keshif.svg');
  }

  .creditsBox{
    font-family: "Roboto", Helvetica, Arial, sans-serif;
    padding: 1em;
    font-size: 1.2em;
    text-align: center;

    .kshfLogo{
      height: 4em;
      &:hover{
        outline: solid 1px lightgray;
      }
    }

    .creditsLink{
      display: inline-block;
      padding: 0.3em;
      margin: 0.3em;
      font-weight: 300; 
      border: solid 1px lightgray;
      text-decoration: none;
      font-size: 0.8em;
      font-weight: 300;
      &:hover{
        color: var(--color_hoverAction);
        border-color: var(--color_hoverAction) !important;
      }
    }
    .homepageLink{
      font-size: 0.8em;
      font-weight: 300;
      float: right;
      &:hover{
        color: var(--color_hoverAction);
      }
    }
    .copyright{
      margin: 1em 0 0.8em;
      font-weight:300;
      font-size: 0.8em;
      text-align: center;
      color: gray;
    }
  }

  .recordAttribTable{
    display: grid;
    grid-template-columns: repeat(5, auto);

    border-collapse: collapse;
    margin: 10px 20px;

    .linkInData{
      display: inline-block;
      max-width: 300px;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
      font-size: 0.9em;
      color: var(--color-nav-highlight-bg);
      &:hover{
        color: var(--color_hoverAction);
      }
    }

    tbody{
      display: contents;
      > tr {
        display: contents;
        > td > table { display: contents; }
        &.groupCloseRow > td{ grid-column: 1 / span 6; }
        &.groupedTableWrapper > td{ display: contents; }
      }

      &.collapsed{
        > tr.attribRow:not(.groupTitle) { display: none; }
        > tr.groupedTableWrapper { display: none; }
        .groupTitle .collapseArrow > .fa{
          transform: rotate(-90deg);
        }
        .groupNameRow{
          > td { 
            color: gray;
          }
        }
      }
      &:not(.collapsed){
        > tr.groupCloseRow{
          > td{ 
            border-bottom: solid 1px gray;
          }
        }
      }
    }
    .basicAttrib{
      .recAttribVal{
        grid-column: 2 / span 4;
      }
    }
    .groupNameGap{
      grid-column: 2 / span 4;
      padding: 0 0.5em;
      text-align: left;
    }

    .timeKeySelect{
      text-align: center;
      grid-column: 2 / span 3;
      > select{
        font-family: "Roboto Slab";
        width: calc(~"100% - 48px");
        vertical-align: top;
        text-align-last: center;
        font-size: 1em;
        &:focus{ outline: none; }
      }
      > .fa{
        color: lightgray;
        cursor: pointer;
        font-size: 1.5em;
        transition: color 200ms linear;
        &:not(.active){
          visibility: hidden;
        }
        &.prevTimeKey{
          margin-right: 8px;
        }
        &.nextTimeKey{
          margin-left: 8px;
        }
      }
      &:hover > .fa{
        color: gray;
        &:hover{ color: var(--color_hoverAction); }
      }
    }
    .timeseriesEditView{
      text-align: right;
    }
    .columnHead_Value{
      border-bottom: solid 1px lightgray;
    }
    .columnHead_Change{
      border-bottom: solid 1px lightgray;
    }
    .columnHead_Rank{
      border-bottom: solid 1px lightgray;
    }
    .timeseriesEditViewButton{
      opacity: 0;
      font-weight: 300;
      font-size: 0.8em;
      cursor: pointer;
      transition: all 250ms linear;
      &:hover{ color: var(--color_hoverAction); }
    }
    .timeseriesAttribs{
      border-top: double 3px lightgray;
      &:hover .timeseriesEditViewButton{
        opacity: 1;
      }
      .recAttribName{
        align-items: center;
        > .TheName{
          word-break: break-word;
          white-space: pre-wrap;
        }
      }
      .recTimeKeyValue{
        position: relative;
        min-width: 150px;
        > .ValueBar{
          height: 0.5em;
          width: 100%;
          border: solid 1px lightgray;
          position: absolute;
          top: 1.2em;
          z-index: -1;
          > .TheBar{
            position: absolute;
            height: 100%;
            width: 0px;
            background-color: var(--color_recordBar);
          }
        }
      }
      > tr:nth-child(1){
        > td {
          padding-top: 0.3em;
        }
      }
      > tr:nth-child(2){
        > td { 
          font-weight: 300;
          font-size: 0.9em;
          text-align: center;
          padding: 2px 4px;
        }
      }
      .groupedTable > tr:last-child{
        svg.recordDetailTimeseries{ .extentYearGroup{ display: block; } }
      }
    }
    .attribHierarchyWrapper{
      display: flex;
      align-items: center;
      padding: 0px;
      height: 100%;
      > .hrchyItem{
        display: inline-block;
        width: 1em;
        text-align: center;
        position: relative;
        &.collapseArrow{
          display: flex;
          align-items: center;
          justify-content: center;
          height: 100%;
          cursor: pointer;
          &:hover{
            color: var(--color_hoverAction);
          }
        }
        &.extendLine{
          height: 100%;
          &:after{
            content:"";
            position: absolute;
            border-left: solid 1px lightgray;
            left: 50%;
            transform: translateX(-1px);
            height: 100%;
            top: 0%;
            display: block;
            color: gray;
          }
        }
      }
    }
    .recTimeKeyChange{
      align-self: center;
      font-weight: 300;
      font-size: 1.2em;
      text-align: center;
      > .fa { 
        transition: transform 500ms ease-in-out, color 200ms linear; 
        font-weight: 800;
        font-size: 1.4em;
      }
      &[data-status="steady"] > .fa{
        color: #a6a6a6;
      }
      &[data-status="noValue"] > .fa{
        color: gray;
        &:before{
          content: "\f068"; // fa-minus
        }
      }
      &[data-status="improve"] > .fa { 
        transform: rotate(-90deg); 
        color: #008e41;
      }
      &[data-status="decline"] >.fa { 
        transform: rotate(90deg); 
        color: #a00022;
      }
    }
    .recTimeKeyValue{
      align-self: center;
      font-weight: 300;
      font-size: 1em;
      text-align: center;
      padding: 0px 3px;
    }
    .recTimeKeyRank{
      align-self: center;
      font-weight: 300;
      text-align: center;
      padding: 0px 3px;
      cursor: default;
      > .rankValue{ 
        &:before{ content: "#"; }
        margin: 0px 2px;
      }
      > .rankOutOf{ 
        color: gray;
        font-size: 0.8em; 
        &:before{ content: "/"; margin-right: 2px; };
      }
    }
    .recAttribName{
      display: flex;
      justify-content: flex-end; // instead of text-align: right;
      align-self: center;
      align-items: flex-start;
      position: relative;
      height: 100%;
      max-width: 350px;
      padding: 0px 10px;
      //text-align: right;
      font-weight: 500;
      cursor: default;
      position: relative;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-family: "Roboto Slab", serif;
      > .TheName{
        //white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        text-align: right;
        padding-right: 5px;
        word-break: break-word;
        white-space: pre-wrap;
      }
      > .summaryDescription{
        margin: 0.5em 4px 0px;
        font-size: 0.8em;
        color: lightgray;
        transition: all 250ms;
        &:hover{ color: var(--color_hoverAction); }
      }
      > .modifyAttribPos{
        display: none;
        position: absolute;
        color: gray;
        opacity: 0.3;
        left: 0px;
        top: calc(~"50% - 0.5em");
        font-size: 0.8em;
        cursor: pointer;
        transition: all 250ms;
        &:hover{ color: var(--color_hoverAction); }
      }
    }
    tr.attribRow{
      &:hover{
        color: var(--color_hoverAction);
        .recAttribName {
          > .TheName{
            word-break: break-word;
            white-space: pre-wrap;
          }
          > .summaryDescription{ color: gray; }
          > .modifyAttribPos{ opacity: 1; }
        }
        .recordDetailTimeseries .extentYearGroup{
          display: inline-block;
        }
      }
    }
    .recAttribVal{
      align-self: center;
      text-align: left;
      font-weight: 300;
      position: relative;
    }
  }

  .filterContextOpt{
    display: inline-block;
    text-align: center;
    width: 35px;
    font-weight: 500;
  }
  .filterContextLabel{
    display: inline-block;
    max-width: 120px;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-right: .5em;
  }
  .filterContextMultiple{
    opacity: 0.5;
  }

    .overlay_wrapper {
      position: absolute;
      top: 0px;
      left: 0px;
      width: 100%;
      height: 100%;
      z-index: 1048;
      transition: transform 500ms ease-in-out, var(--transition_opacity);

      > .fullBackground{
        position: absolute;
        width: 100%;
        height: 100%;
        z-index: -2;
        background-color: black;
        opacity: 0;
        transition: var(--transition_opacity_slow);
        border-radius: 5px;
        pointer-events: none;
      }

      > .overlay_content{
        display: none;
        margin: auto;
        box-shadow: 0px 0px 20px black;
        //border-radius: 5px;
        background-color:white;
        opacity: 1.0;
        z-index: 1043;
        max-height: 90%;
        max-width: 90%;
        overflow-y: auto;
        overflow-x: hidden;

        > .overlay_Header{
          font-family: "Roboto Slab", serif;
          background-color: var(--color_background_Dark);
          cursor: default;
          color: white;
          padding: 5px 30px;
          text-align: center;
          font-size: 1.1em;
          font-weight: 300;
          > .idSummaryName{
            font-weight: 300;
            font-size: 0.9em;
            vertical-align: top;
            &:after{
              content: ":";
              margin: 0 3px 0 3px;
            }
          }
          > .idContentWrapper{
            display: inline-block;
            position: relative;
            cursor: pointer;
            overflow: hidden;
            vertical-align: top;
            &.disabled{
              pointer-events: none;
              > span.theText:after{
                display: none;
              }
            }
            > select{
              position: absolute;
              top: 0.15em;
              left: 0px;
              width: 100%;
              height: 100%;
              z-index: 1;
              cursor: pointer;
              vertical-align: middle;
              font-size: 0.7em;
              border-color: #999;
              opacity: 0;
              outline: none;
            }
            > span.theText{
              z-index: 2;
              cursor: pointer;
              &:after{ 
                .kshf-fa();
                content: "\f107";
                padding-left: 0.1em;
                text-decoration: none;
                display: inline-block;
              }
            }
            &:hover > span.theText{ 
              color: orange;
            }
          }
        }

        > .overlay_Close{
          font-size: 1.2em;
          position: absolute;
          right: 3px;
          top: 3px;
          cursor: pointer;
          color: gray;
          padding: 1px;
          &:hover{ color: var(--color_hoverAction); }
        }
      } // overlay_content

      > .overlay_loading{
        text-align: left;
        padding: 10px 20px;

        // http://tobiasahlin.com/spinkit/
        .spinner{
          display: inline-block;
          vertical-align: top;
          left: 20px;
          top: 3px;
          font-size: 10px;
          width: 50px;
          height: 40px;
          text-align: center;
          font-size: 10px;
          > .spinner_x {
            margin-right: 2px;
            background-color: rgb(163, 189, 209);
            height: 100%;
            width: 6px;
            display: inline-block;
            animation: stretchdelay 1.2s infinite ease-in-out;
          }
          > .spinner_2 { animation-delay: -1.1s; }
          > .spinner_3 { animation-delay: -1.0s; }
          > .spinner_4 { animation-delay: -0.9s; }
          > .spinner_5 { animation-delay: -0.8s; }
        }
        .status_text{
          display: inline-block;
          font-family: "Roboto Slab", serif;
          line-height: 40px;
          font-size: 1.1em;
          vertical-align: bottom;
          > .status_text_sub{
            margin-left:5px;
          }
        }
      }

      > .overlay_infobox{
        display:none;
        height: auto;
        cursor: default;

        > .overlay_Close{ display: none; }

        .socialMedia{
          float: right;
          font-size: 1.6em;
          margin: 8px 3px;
          position: relative;
          text-decoration: none !important;
          text-shadow: 0px 0px 3px white;
          &:hover{
            text-decoration: underline !important;
            top: -5px;
          }
        }
       
        .infobox-header{
          background-color: var(--color_background_VeryLight);
          width: 100%;
          padding-top: 5px;
          box-shadow: 0px 0px 10px gray;
          text-align: center;
        }
        a{
          color: black;
        }
      }
      > .overlay_recordDetails{
        position: relative;
        margin: 20px;
        flex-direction: column;
        > .content{
          display: block;
          flex-grow: 1;
          overflow-x: auto;
          overflow-y: auto;
          
          img.autoDetectedImg{
            max-width: 100%;
          }
        }

        > .overlay_Close{
          color: var(--color_background_VeryLight);
        }
        > .filterOutRecord{
          position: absolute;
          left: 2px;
          top: 2px;
          padding: 0.2em;
          font-size: 1em;
          cursor: pointer;
          color: var(--color_background_VeryLight);
          &:hover{ color: var(--color_hoverAction); }
        }
      }

      > .overlay_modal {
        > .overlay_Content{
          padding: 16px;
          flex: 1;
          overflow-y: auto;
          line-height: 1.6em;
          font-weight: 300;
          text-align: center;
          a{
            color: black;
            &:hover{ color: var(--color_hoverAction); }
          }
        }
        .ModalButtons {
          text-align: center;
          flex: 0 0;
          padding: 10px;
          border-top: solid 1px var(--color_background_Light);
        }
        .learnIcon{
          cursor: pointer;
          &:hover{ color: var(--color_hoverAction); }
          &:after{
            .kshf-fa();
            display: inline-block;
            margin-left: 3px;
            content: "\f059";
          }
        }
        .modalButton {
          display: inline-block;
          padding: 4px 25px;
          margin: 4px 16px;
          min-width: 85px;
          text-align: center;
          border: solid 1px gray;
          border-radius: 3px;
          cursor: pointer;
          position: relative;
          overflow: hidden;
          font-family: "Roboto Slab", serif;
          box-shadow: 1px 1px 2px lightgrey;
          &:hover{
            color: var(--color_hoverAction);
            border-color: var(--color_hoverAction);
          }
          &:before{
            .kshf-fa();
            transition: all 250ms;
            right: -25%;
            padding-top: 2px;
            position: absolute;
          }
          &:hover:before{
            right: 2px;
          }
          &.confirmButton{
            &:before{ content: "\f00c"; }
            &:hover{
              color: green;
              border-color: green;
            }
          }
          &.rejectButton{
            &:before{ content: "\f00d"; }
            &:hover{
              color: red;
              border-color: red;
            }
          }
        }
        &.modalAlert{
          .rejectButton{ display: none; }
        }

        .changeList{
          margin: 8px;
        }

        .changeToggle{
          > input.theToggleInput{ 
            display: none;
            &:checked + label.theToggleLabel:after{
              left: 50%;
              background: #7FC6A6;
              content: "\f00c";
              color: white;
            }
          }
          > label.theToggleLabel{
            transition: all .2s ease;
            background: #fff;
            border: 4px solid #f2f2f2;
            border-radius: 2em;
            outline: 0;
            display: block;
            width: 2.2em;
            height: 1.1em;
            position: relative;
            cursor: pointer;
            box-sizing: content-box;
            user-select: none;
            &:hover{
              box-shadow: 0px 0px 2px gray;
            }
            &:after{
              .kshf-fa();
              position: relative;
              display: block;
              content: "";
              width: 1.4em;
              height:  1.4em;
              content: "";
              line-height: 1.4em;
              font-size: 0.8em;
              color: white;
              text-align: center;
              color: var(--color_hoverAction);
              transition: all .2s ease;
              background: #f2f2f2;
              border-radius: 1em;
              left: 0px;
              content: "\f00d";
            }
          }
        }
      }

      &[show="none"]{
        pointer-events: none;
        .panel_ImportData{ display: none; }
      }
      &:not([show="none"]){
        display: flex;           
        flex-direction: column;  
        justify-content: center; 
        align-items: center;
        > .fullBackground{ opacity: 0.3; pointer-events: all; }
      }
      &[show="loading"] {
        > .overlay_loading{ display: block; }
        > .fullBackground{ opacity: 0.7 !important; }
      }
      &[show="infobox"] {
        > .overlay_infobox{ display: block; }
      }
      &[show="source"] {
        > .overlay_source{ display: block; }
      }
      &[show^="help"]{
        > .overlay_help { display: flex; }
      }
      &[show^="modal"]{
        > .overlay_modal { 
          display: flex;
          flex-direction: column;
          overflow-y: hidden;
        }
      }
      &[show="recordDetails"]{
        > .overlay_recordDetails{ display: inline-flex; }
      }
    } // overlay_wrapper

    .hasLabelWidth{ text-align: right; }

    .metricFuncSelectButton{
      height: 1em;
      color: white;
      cursor: pointer;
      transform-origin: 50% 52%;
      transition: all 250ms linear;
      &:hover{ color: var(--color_hoverAction) !important; }
    }

    .summaryHeaderButton{
      display: inline-block;
      flex: 0 0 16px;

      height: 16px;
      width: 16px;
      opacity: 0;

      font-size: 0.8em;

      cursor: pointer;
      position: relative;

      transition: var(--transition_bgcolor), 
                  color 100ms linear, 
                  var(--transition_opacity_slow);
    }
    
    .summaryLockButton{
      text-align: center;
      visibility: hidden;
      color: gray;
      line-height: 14px;

      background: white;

      &:hover{ 
        background-color: white !important;
        color: var(--color_hoverAction) !important;
        border: solid 1px;
      }

      .iconColor(black);
      > .custom_icon {
        width: 11px;
        margin: 2px;
      }
      &:hover{
        > .custom_icon{ display: none; }
        &:before{
          content: "\f00c"; // fa-times
          font-weight: 400;
        }
      }
    }

  .clearFilterButton{
    background-color: var(--color_filter_clear);
    border: solid 1px var(--color_filter_clear);
    color: white;

    line-height: 14px;
    font-size: 0.7em;

    vertical-align: top;
    font-weight: 700;
    text-align: center;

    pointer-events: none;

    opacity: 0;

    &:before{ content: "\f0b0"; } // filter
    &:hover{
      background-color: white;
      color: var(--color_hoverAction);
      border-color: var(--color_hoverAction);
      &:before{ content: "\f00d" !important; } // cross
    }
  }

  .chartAxis_Measure {
    pointer-events: none;
    position:absolute;
    z-index: 2;
    top: 0px;
    height: 100%;
    > .tickGroup > .tick{
      opacity: 0;
      position:absolute;
      &.noAnim{
        transition: none;
      }
      > .text{
        position: absolute;
        text-align: center;
        font-size: 0.7em;
        font-weight: 300;
        color: gray;
        line-height: 9px;
        cursor: default;
        transition: var(--transition_opacity_slow);
        &.measureAxis_1{ display: block; }
      }
      > .line{
        display: block;
        position: absolute;
        border: dotted 0px var(--color_axis_line); // default
      }
      &.minor {
        > .line{
          border-color: var(--color_axis_line_light);
        }
        > .text{
          opacity: 0;
          pointer-events: none;
        }
      }
    }
  }

  .leaflet-tile-pane{
    transition: var(--transition_opacity);
    &[showhide=hide]{ opacity: 0.2; }
  }

  .dragWidthHandle{
    display: none;
    position: absolute;
    top: 0px;
    cursor: col-resize;
    border-right: dashed gray 2px;
    &:hover, &.dragging{ 
      display: block !important;
      border-right: solid var(--color_hoverAction) 3px;
    }
  }

  .headerGroup{
    flex: 0 0 auto; // do not shrink/expand, auto-set the size

    display: flex;
    flex-direction: row;
    justify-content: center;

    //padding: 3px;
    transition: border-color 250ms linear;

    position: relative;

    //border-radius: 2px;
    //box-shadow: 0px 0px 2px rgb(155, 155, 155);
    background-color: white;
    border: solid 1px var(--color_background_Light-darken-15);

    > .summaryNameWrapper{
      flex: 1 1 auto;
      display: flex;
      max-width: calc(~'100% - 100px'); // the content still goes beyond the limits if this is not set.
      justify-content: center;
      margin: 3px 0;
      align-items: center;
      > .blockName{
        display: flex;
        justify-content: center;
        cursor: default;
        padding: 0px 3px;
        overflow: hidden;
        > .blockName_Path{
          font-weight: 400;
          font-family: "Roboto Slab", serif;
        }
        > .blockName_Print{
          font-weight: 700;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          font-family: "Roboto Slab", serif;
          pointer-events: none;
        }
      }
    }

    > .summaryIcons{
      justify-content: flex-end;

      > .fa{ display: none; }
    }

    > .iconGroup{
      flex: 0 0 50px;

      display: flex;
      align-items: center;

      z-index: 2;
      font-size: 0.9em;
      white-space: nowrap;

      color: var(--color_background_Dark);

      &.header_display_control{
        margin-left: 2px;
      }

      > .summaryViewAs{
        display: none;
        background: white;
        color: gray;
        align-items: center;
        justify-content: center;
        width: 1.7em;
        position: relative;
        height: 100%;
        opacity: 1;
        cursor: pointer; 
        text-align: center;
        transition: all 250ms linear, var(--transition_opacity);
        border-left: solid 1px var(--color_background_Light-darken-15);
        outline: none;
        &:hover{ color: var(--color_hoverAction); }
        &.active{
          .activeViewOption();
          border-left-color: rgba(255,255,255,0);
        }
      }

      > .fa, >.far, >.fal{
        width: 1em;
        margin: 0.1em;
        text-align: center;
        opacity: 0;
        color: var(--color_background_Dark);
        cursor: pointer;
        transition: color 250ms linear, var(--transition_opacity);
        &:hover{ color: var(--color_hoverAction); }
        &.summaryConfigControl{
          display: inline-block;
        }
        &.summaryDescription{
          opacity: 1;
          display: none;
          cursor: default;
          width: 10px;
          font-size: 0.8em;
          &:hover{ color: black; }
          &.active{ display: inline-block; }
        }
        &.buttonSummaryCollapse{ display: inline-block; }
        &.buttonSummaryOpen{ display: none; }
        &.buttonSummaryRemove{ display: none; }
        &.buttonSummaryExpand{ display: none; }
      }
    }

  } // headerGroup

  .lockButton{ // generic style (for all charts)
    font-size: 1em;
    opacity: 0;
    z-index: 21;
    cursor: pointer;
    pointer-events: none;
    text-align: center;
    transition: all 250ms;
    .iconColor(var(--color_background_Dark));
    &:hover{
      &:before{ content: "\f00c";  } // cross icon
    }
    &.inside{
      color: white !important;
      text-shadow: 0px 0px 1px black;
    }
  }

  .aggrGlyph{
    display: block;
    position: absolute;
    transition: all 700ms ease-in-out;

    > .measureGroup > {
      [class^="measure_"]{
        cursor: pointer;
      }
      [class^="measure_Compare"]{ 
        opacity: 0;
      }
    }

    // HTML
    > div.measureGroup {
      > [class^="measure_"]{
        display: block;
        position: absolute;
        transform-origin: 0% 0%;
        transition: var(--bar_animation);
      }
    }

    // SVG - setPair and pointCluster
    > g.measureGroup {
      > [class^="measure_"]{
        pointer-events: visiblePainted;
      }
      > [class^="measure_Active"]{
        fill: var(--color_bars);
      }
      > [class^="measure_Total"]{
        fill: var(--color_distr_total);
      }
      > [class^="measure_Compare"]  { 
        opacity: 0;
        fill: none;
        stroke-width: 0px;
      }
      > [class^="measure_Compare_A"]{ stroke: var(--color_Compare_A); }
      > [class^="measure_Compare_B"]{ stroke: var(--color_Compare_B); }
      > [class^="measure_Compare_C"]{ stroke: var(--color_Compare_C); }
      > [class^="measure_Compare_D"]{ stroke: var(--color_Compare_D); }
      > [class^="measure_Compare_E"]{ stroke: var(--color_Compare_E); }
    }

    // Lock button styles
    &.Compare_A .lockButton { .iconColor(var(--color_Compare_A)); }
    &.Compare_B .lockButton { .iconColor(var(--color_Compare_B)); }
    &.Compare_C .lockButton { .iconColor(var(--color_Compare_C)); }
    &.Compare_D .lockButton { .iconColor(var(--color_Compare_D)); }
    &.Compare_E .lockButton { .iconColor(var(--color_Compare_E)); }
    
    &.showLock.locked {
      .filterButton{
        display: block;
      }
      .lockButton{
        display: block;
        opacity: 1;
        &:hover{
          &:before{ content: "\f00d";  } // cross
        }
      }
    }

    &.catGlyph{
      display: flex;
      top: 0px;
      width: 100%;
      left: 0px;
      pointer-events: all;

      outline: solid 0px #eee;
      transition: var(--layout_animation);
      &:hover{ 
        outline: solid 1px var(--color_background_Light-darken-15);
        z-index: 2;
      }

      > .measureGroup{
        flex: 1;
        position: relative;
        > [class^="measure_"]{
          top: 0px;
          left: 0px;
          width: 1px;
          height: 1px;
          margin: 0px;
          vertical-align: top;
        }
      }

      &.draggedCategory{
        z-index: 100;
        background-color: white;
        transition: none;
      }
    } // .catGlyph

    &.rangeGlyph{
      height: 100%;
      > .measureGroup > [class^="measure_"]{
        transform-origin: 0% 100%;
        width: 1px;
        height: 1px;
        cursor: pointer;
      }
      > .lockButton {
        position: absolute;
        text-align: center;
        width: 16px;
        left: calc(~"50% - 8px");
        top: -5px;
        &.inside{ margin-top: 17px; }
      }
      > .measureLabelGroup {
        position: absolute;
        top: 100%;
        height: 13px;
        width: 100%;
        > .measureLabel{
          width: 100%;
          text-align: center;
          cursor: pointer;
          position: absolute;
        }
      }
    } // .rangeGlyph


    &.clusterGlyph{
      > .measureGroup > {
        > path.measure_Active{
          stroke-opacity: 0.7;
          stroke-width: 1px;
          stroke: var(--color_background_Dark);
          stroke-dasharray: 6 3;
        }
      }
      > text.sizeValueText{
        text-decoration: underline;
      }
      &.tinyCluster{
        > text.sizeValueText{
          font-size: 0.8em;
        }
        > .measureGroup > path.measure_Active{
          stroke-dasharray: 4 2;
        }
      }
      &.clampedCluster{
        > text.sizeValueText{
          font-size: 1.25em;
        } 
        > .measureGroup > path.measure_Active{
          stroke-dasharray: 8 4;
        }
      }
      &.darkBg{
        > .measureGroup > {
          > path.measure_Active{
            stroke: white;
          }
        }
      }
    }

    &.setPairGlyph{
      > .setPairBackground{
        opacity: 0;
        transition: var(--transition_opacity_slow), fill 500ms linear;
      }
      > .measureGroup {
        > [class^="measure_"]{
          transition: none;
        }
        > .measure_Active{
          stroke: white;
          transition: var(--transition_opacity_slow), fill 500ms linear;
          opacity: 1 !important;
        }
      }
      &[activesize="0"]{ display: none; }
      //&:not([activesize="0"]) > .setPairBackground{ opacity: 1; }
    } // .setPairGlyph

    &.mapGlyph{
      > .measureGroup > path.measure_Active{
        fill-opacity: 0.8;
        stroke-width: 0.5px;
        stroke-opacity: 0.8;
        transition: var(--transition_opacity_slow), fill 600ms linear;
      }
      &.withRecordHighlight{
        > .measureGroup > path.measure_Active{
          transition: fill 200ms ease-in-out;
          stroke: var(--color_onRecord-darken-70) !important;
          stroke-width: 1.5px;
          fill: var(--color_onRecord-darken-50) !important;
        }
      }
    }
  } // aggrGlyph

  text.sizeValueText{
    text-anchor: middle;
    dominant-baseline: central;
    font-family: Roboto;
    text-shadow: 0px 0px 5px white, 0px 0px 2px white, 0px 0px 2px white;
  }
  .darkBg > text.sizeValueText{
    fill: white;
    text-shadow: 0px 0px 5px black, 0px 0px 2px black !important;
  }

  .configTable{
    table-layout: auto;
    margin: 0 auto;
    > tr{
      user-select: none;
      cursor: default;
    }
    > tr.configItemGroup{
      > .groupName{
        text-align: right;
        text-decoration: underline;
        font-weight: 500;
        padding: 4px;
      }
    }
    > tr.configItem{
      font-weight: 300;
      text-align: center;
      height: auto;
      margin: 2px 0px;
      > td {
        padding: 1px;
      }
      &.forced{
        .configItem_Options{
          pointer-events: none;
          opacity: 0.6;
        }
      }
      &.hidden{
        display: none;
      }

      > td.configItem_Info{
        color: var(--color_background_Light-darken-15);
        cursor: pointer;
        width: 1.2em;
        text-align: center;
        &:hover{ color: var(--color_hoverAction); }
      }
      > td.configItem_Header{
        text-align: right;
        min-width: 120px;
      }
      > td.configItem_Icon{
        width: 1.6em;
        text-align: center;
        color: gray;
        > .icon{
          font-weight: 300;
        }
      }
      > td.configItem_Options_td{
        min-width: 220px;
        > .configItem_Options{
          padding: 0px;
          display: flex;
          flex-wrap: wrap;
          > select{
            flex: 1 0 auto;
            &.timeKeys{
              &.hide{ display: none; }
            }
          }
        }
      }

      &.configItem_MinAggrSize,
      &.configItem_barHeight
      {
        .configOption{ flex-basis: auto !important; }
      }

      &.configItem_list_sortInverse{
        display: none;
      }

      &.configItem_ts_Type{
        .configOption{
          flex: 1 0 50%;
          &.pos_Rank{
            border-right: solid 1px var(--color_background_Dark);
          }
          &.pos_Rank, &.pos_Value{
            border-bottom: none;
          }
        }
      }

      &.configItem_showWholeAggr{
        .icon.fa-square{
          color: var(--color_bars);
          font-weight: 700; // filled square
        }
      }
      &.configItem_mouseOverCompare{
        .icon{
          font-size: 0.9em;
        }
      }
      &.configItem_breakdownMode{
        .configOption.pos_absolute{
          flex: 1 0 90%;
          border-right: solid 1px var(--color_background_Dark);
          border-bottom: none;
        }
      }
    }

    .percentileBlocks{
      display: inline-flex;
      border: solid 1px white;
      margin: 0 0.3em;
      filter: grayscale(1);
      > .percentileBlock{
        display: inline-block;
        width: 3px;
        height: 1em;
      }
    }

    .configOption{
      flex: 1 1 30px;
      display: flex;
      justify-content: center;
      align-items: center;
      border: solid 1px var(--color_background_Dark);
      border-right: none;
      padding: 2px 3px;
      font-size: 0.8em;
      background-color: white;
      cursor: pointer;
      white-space: nowrap;

      &:hover{ 
        color: var(--color_hoverAction);
        // font-weight: 400; // Don't. The change in font weight on mouse-over doesn't look great.
      }
      &:last-child{ border-right: solid 1px var(--color_background_Dark); }
      &.active:not(.pos__range_){ 
        background-color: var(--color_darkGrayBackground);
        font-weight: 400;
        color: white;
        cursor: default;
        .minAggrYes{ display: none; }
        .minAggrInfo{ display: inline-block; }
      }
      &.disabled{
        pointer-events: none;
        opacity: 0.6;
        text-decoration: line-through;
      }

      &.pos_minus, &.pos_plus{ 
        flex: 0 0 2em !important;
        > .fa { font-weight: 400; }
      }
      &.pos_linear{ display: inline-block; width: 75px; }
      &.pos_log   { display: inline-block; width: 75px; }
      &.pos_Off   { display: inline-block; max-width: 40px; }
      &.pos__range_ {
        > .configOptionRange{
          width: 100%;
          &.noUi-horizontal .noUi-handle{
            width: 16px;
            height: 16px;
            right: -8px !important;
            top: -4px;
          }
        }
        &:not(.active) {
          > .configOptionRange.noUi-horizontal .noUi-handle{ 
            background: white;
          }
        }
      }

      &.inverseSort{
        border-radius: 5px !important;
        margin-left: 3px;
        width: 17px;
        display: inline-block;
      }
      .minAggrInfo{
        display: none;
        font-weight: 300;
      }
      .minAggrSizeInput{
        display: inline-block;
        width: 40px;
        height: 1em;
        font-family: Roboto;
        vertical-align: initial;
        border: solid 0px white;
        &:focus{
          outline-color: var(--color_hoverAction);
          outline-width: 2px;
          border-color: var(--color_hoverAction);
        }
        &:hover{ border-color: var(--color_hoverAction); }
      }
      > .fa{
        margin: 0 4px;
      }
    }
  }


    // ***********************************************************************************************************
    // PERCENTILE CHART STYLES

    .percentileGroup{
      display: flex;
      flex-direction: column;
      position: relative;
      border-style: solid;
      border-color: lightgray;
      border-width: 1px 0px;
      opacity: 1;
      transition: var(--transition_opacity_slow);
      height: var(--height_percentile);
      > .percentileTitle{
        font-size: 0.6em;
        position: absolute;
        display: inline-block;
        font-weight: 300;
        top: 0px;
        right: -10px;
        text-shadow: 0px 0px 2px white;
        z-index: 120;
        color: gray;
        pointer-events: none;
        display: block;
        opacity: 0;
        transition: var(--transition_opacity_slow);
      }
      &:hover > .percentileTitle{ opacity: 1; }
    } // percentileGroup

    *[class^="percentileChart"]{
      flex: 1;
      position: relative;
      opacity: 1;
      > .quantile {
        box-sizing: content-box;
        height: 100%;
        left: 0px;
        width: 1px;
        top: -1px;
        margin: 1px 0px;
        transform-origin: 0% 0%;
        cursor: pointer;
        &.q_pos{
          position: absolute;
          margin-left: -0.5px;
          pointer-events: none;
          background-color: rgba(0,0,0,0.4);
          box-shadow: 0px 0px 2px white, 0px 0px 2px white;
          transition: var(--transition_all_750ms);
          &.q_50 {
            width: 2px;
            margin-left: -1px;
            pointer-events: all;
            background-color: rgb(10,10,10);
          }
        }
      }
    }
    *[class^="percentileChart_Compare"]{ 
      display: none;
      pointer-events: all; // mouse-over can be applied...
      //background-color: white;
      //border-top: solid 1px #EEEEEE;
    }
    .percentileChart_Active{ 
      > .qG4 { background-color: var(--color_bars) }
      > .qG3 { background-color: var(--color_bars); opacity: 0.8; }
      > .qG2 { background-color: var(--color_bars); opacity: 0.6; }
      > .qG1 { background-color: var(--color_bars); opacity: 0.4; }
    }
    .percentileChart_Compare_A {
      > .qG4 { background-color: var(--color_Compare_A);  }
      > .qG3 { background-color: var(--color_Compare_A); opacity: 0.75; }
      > .qG2 { background-color: var(--color_Compare_A); opacity: 0.50; }
      > .qG1 { background-color: var(--color_Compare_A); opacity: 0.25; }
    }
    .percentileChart_Compare_B {
      > .qG4 { background-color: var(--color_Compare_B); }
      > .qG3 { background-color: var(--color_Compare_B); opacity: 0.75; }
      > .qG2 { background-color: var(--color_Compare_B); opacity: 0.50; }
      > .qG1 { background-color: var(--color_Compare_B); opacity: 0.25; }
    }
    .percentileChart_Compare_C {
      > .qG4 { background-color: var(--color_Compare_C); }
      > .qG3 { background-color: var(--color_Compare_C); opacity: 0.75; }
      > .qG2 { background-color: var(--color_Compare_C); opacity: 0.50; }
      > .qG1 { background-color: var(--color_Compare_C); opacity: 0.25; }
    }
    .percentileChart_Compare_D {
      > .qG4 { background-color: var(--color_Compare_D); }
      > .qG3 { background-color: var(--color_Compare_D); opacity: 0.75; }
      > .qG2 { background-color: var(--color_Compare_D); opacity: 0.50; }
      > .qG1 { background-color: var(--color_Compare_D); opacity: 0.25; }
    }
    .percentileChart_Compare_E {
      > .qG4 { background-color: var(--color_Compare_E); }
      > .qG3 { background-color: var(--color_Compare_E); opacity: 0.75; }
      > .qG2 { background-color: var(--color_Compare_E); opacity: 0.50; }
      > .qG1 { background-color: var(--color_Compare_E); opacity: 0.25; }
    }
    // PERCENTILE CHART STYLES - END
    // ***********************************************************************************************************

    .noValueAggr{
      display: none;
      position: absolute;
      left: 0px;
      bottom: 1px;
      color: var(--color_background_Dark);
      transition: color 250ms linear;
      cursor: pointer;
      align-items: center;
      padding: 0 0.1em;

      &:hover{
        color: var(--color_hoverAction) !important;
      }
      &.visible{
        display: flex;
      }
      &.filtered{
        display: flex;
        outline: solid 1px darken(lightgray,20%);
        background-color: #efefef;
      }
      &.withRecordHighlight{ 
        color: black !important;
        outline: solid 1px var(--color_onRecord-darken-20);
        background-color: var(--color_onRecord) !important;
      }
      > .noValueIcon{
        margin: 0 0.2em;
        font-family: "Arial, sans-serif";
        font-weight: 800;
      }
    }

  .summaryCategorical > .mapGlyphColorSetting .colorOptions > .mapColorScaleGroup{
    min-width: 150px;
  }

  .timeAnimation{
    display: none;
    left: 0px;
    right: 0px;
    top: 0px;
    height: 35px;
    padding: 0 2px;
    align-items: center;
    background-color: #fff;
    border: solid 1px var(--color_background_Light-darken-15);
    border-width: 0px 1px 1px 1px;
    > .icon{
      position: absolute;
      top: -1.1em;
      width: 73px;
      padding: 0px 10px;
      font-size: 1.3em;
      text-align: center;
      color: var(--color_background_Dark);
      transform: scale(-1,01);
      text-shadow: 0px 0px 12px white, 0px 0px 2px white, 0px 0px 2px white;
      &::before{
        box-shadow: 0px 0px 3px white;
        background: white;
        width: 1em;
        height: 1em;
        display: inline-block;
        border-radius: 1em;
      }
    }
    > .timeKeyStep{
      width: 0.8em;
      text-align: center;
      color: gray;
      font-size: 1.2em;
      cursor: pointer;
      &:hover{
        color: var(--color_hoverAction);
      }
      opacity: 0;
      pointer-events: none;
      &.active{
        opacity: 1;
        pointer-events: all;
      }
    }
    > select.timeKeySelect{
      background: var(--color_darkGrayBackground);
      color: white;
      font-family: "Roboto Slab";
      font-size: 1em;
      border: none;
      transition: var(--transition_bgcolor);
      &:hover{
        background-color: var(--color_hoverAction);
      }
    }
    > .clearRange{ 
      display: none;
      cursor: pointer;
      font-size: 1.4em;
      color: lightgray;
      margin-right: 10px;
      visibility: hidden;
      &:hover{ color: var(--color_hoverAction); }
      &.active{ visibility: visible; }
    }
    > .timeKeyRange{
      flex: 1;
      align-items: center;
      margin: 0px 0.5em;
      display: flex;
      cursor: default;
      position: relative;
      font-family: Roboto Slab;
      user-select: none;
      &.hidden{
        display: none;
      }
      > [class^="rangeTick"]{
        font-weight: 300;
        line-height: 1em;
      }
      .rangeTick-cur{
        display: block;
        position: absolute;
        top: 70%;

        width: 100px;
        margin-left: -50px;

        font-weight: 500;
        font-size: 1em;
        text-align: center;
        text-shadow: 0px 0px 6px white, 0px 0px 3px white, 0px 0px 3px white;

        opacity: 0;
        pointer-events: none;
        transition: var(--transition_opacity), left 700ms ease-in-out;
        z-index: 2;
      }
      > .timeseriesRange{
        display: none;
      }
      > .attribDetailRange{
        position: relative;
      }
      > .attribDetailRange, > .timeseriesRange{
        cursor: ew-resize;
        flex: 1;
        margin: 0px 12px;
      }
      &:hover{
        .rangeTick-cur{ opacity: 1 }
      }
    }
    > .detailPlay{
      margin: 0px 0.15em;
      text-align: center;
      color: var(--color_darkGrayBackground);
      cursor: pointer;
      vertical-align: top;
      font-size: 1.5em;
      transition: all 350ms;
      user-select: none;
      > .fa-pause-circle{ display: none; }
      > .fa{ 
        width: 1em;
        text-align: center;
      }
      &:hover{ color: var(--color_hoverAction); }
    }
    &:hover{
      > .clearRange{ color: gray; }
    }
  }

  .animatingTime {
    .detailPlay{
      > .fa-pause-circle{ display: inline-block; }
      > .fa-play-circle{ display: none; }
    }
    .recordGroup_Scatter .kshfRecord {
      transition: var(--transition_opacity), stroke 250ms linear, transform 700ms linear;
    }
    .timeAnimation > .timeKeyRange .rangeTick-cur{
      opacity: 1;
    }
  }


  .mapGlyphColorSetting{
    display: none;
    position: absolute;
    right:  5px;
    bottom: 5px;
    z-index: 1000;

    text-align: center;

    > .colorCompareGroup{
      flex-wrap: nowrap;
      flex: 0 1 auto !important;
      justify-content: flex-end;
      align-self: center;
      cursor: default;

      > .comparedSummaryName{
        font-weight: 400;
        padding: 4px;
        max-width: 350px;
      }
      > .compareBlocks{
        display: flex;
        flex-wrap: wrap;
        > .compareBlock{
          padding: 0px 4px;
          font-weight: 300;
          font-size: 0.9em;
          display: flex;
          align-items: center;
          > .colorBox{
            border-radius: 1em;
            font-size: 1.1em;
            margin-right: 2px;
          }
          > .theText{
            max-width: 250px;
            display: inline-block;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            vertical-align: top;
          }
        }
      }
    }

    > .colorGroup{
      display: flex;
      > .colorControlGroup{ 
        display: flex;
        align-items: center;
        > select.mainSelect{ flex: 1; }
        .choices > .choices__list{
          right: 0px;
          left: auto;
        }
      }
      > .editColorTheme{ 
        display: none;
        margin: 4px;
      }
      &.active{
        .icon{ display: none; }
      }
    }

    .colorControlGroup{
      display: inline-block;
      position: relative;
    }

    .editColorTheme{
      display: block;
      height: 1em;
      width: 1em;
      color: #BBB;
      font-size: 1em;
      align-self: center;
      cursor: pointer;
      transition: all 250ms ease-in-out;
      transform-origin: 50% 50%;
      &:before{
        font-size: 0.9em;
      }
      &:hover{ color: var(--color_hoverAction); }
      &.rotatedY{ transform: rotateY(180deg); }
      &.rotatedX{ transform: rotateX(180deg); }
    }
    .mapColorScaleGroup{
      display: inline-block;
      margin: 6px 12px;
      position: relative;
      flex-direction: column !important;
      > .mapColorHighlightedValue{
        position: absolute;
        display: block;
        font-size: 22px;
        width: 1em;
        text-align: center;
        transform: translateX(-0.5em);
        color: var(--color_onRecord);
        text-shadow: 0px 0px 2px black, 0px 0px 1px black, 0px 0px 1px black;
        top: -10px;
        opacity: 0;
        z-index: 2;
        pointer-events: none;
        transition: var(--transition_opacity);
      }
      > .mapColorScaleBins{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        height: 1em;
        position: relative;
        min-width: 120px;
        border: solid 1px lightgray;
        > .mapColorThemeBin{
          width: 100%;
          height: 100%;
          transform-origin: 0 0;
          //flex: 1;
          left: 0px;
          top: 0px;
          position: absolute;
          border: solid 1px rgba(1, 1, 1, 0);
          &:hover{ border: solid 1px white; }
        }
      }
      > .mapColorScaleLabels{
        height: 0.9em;
        position: relative;
        > .mapColorScaleLabel{
          display: block;
          position: absolute;
          pointer-events: none;
          &.hidden{
            visibility: hidden;
          }
          > .tickLabel{
            position: relative;
            left: -50%;
            text-align: center;
            white-space: nowrap;
            top: -1px;
            cursor: default;
            font-size: 0.8em;
            font-weight: 300;
            color: gray;
          }
        }
      }
      > .measureDescrLabel{
        position: relative;
      }
    }
  }



    .leaflet-tile-container{ pointer-events: all !important; }

    .measureAxis_2{ display: none; }

    .intervalSlider{
      position:relative;
      user-select: none;
      > .zoomControl{
        display: block;
        opacity: 0;
        position: absolute;
        left: -27px;
        top: 10px;
        font-size: 0.8em;
        color: gray;
        cursor: pointer;
        transition: var(--transition_opacity);
        pointer-events: none;
        user-select: none;
        &:hover{ color: var(--color_hoverAction); }
        &[sign="plus"]:before{ content: "\f00e"; }// zoom-plus
        &[sign="minus"]:before{ content: "\f010"; } // zoom-minus
      }
      > .controlLine {
        height: 11px;
        cursor: ew-resize;
        user-select: none;
        > .recordValue{
          position:absolute;
          z-index: 20;
          top: 1px;
          display: none;
          transition: all 500ms ease-in-out;
          > .recordValueScaleMark{
            display: block;
            top: -2px;
            width: 4px;
            height: 9px;
            background-color: var(--color_onRecord-darken-50);
            left: -1px;
            z-index: 2;
            position: relative;
          }
          > .recordValueText{
            position: absolute;
            top: 7px;
            color: black;
            font-size: 0.8em;
            font-weight: 700;
            white-space: nowrap;
            > .recordValueText-v{
              position: relative;
              left: -50%;
              background-color: var(--color_onRecord);
              outline: solid 1px var(--color_onRecord-darken-20);
              padding: 0px 1px;
              font-size: 0.9em;
            }
          }
        }
        > .base{
          display: block;
          position: absolute;
          //box-shadow: inset 0px 0px 2px gray;
          transform-origin: 0% 0%;
          transition: left 700ms ease-in-out, width 700ms ease-in-out, var(--transition_opacity_slow);
          &.base_Total{
            width: 100% !important;
            height: 3px;
            top: 3px;
            left: 0px;
            background-color: #D4D4D4;
          }
          &.base_Active{
            height: 6px;
            top: 2px;
            width: 1px;
            pointer-events: none;
            background-color: var(--color_filter);
            opacity: 0;
            &.visible{
              opacity: 1;
              pointer-events: all;
            }
            &:hover{ background-color: var(--color_hoverAction) !important; }
          }
          &.base_Compare{
            display: block;
            height: 8px;
            top: 1px;
            width:1px;
            pointer-events: none;
            opacity: 0;
            transition: var(--transition_opacity_slow);
            &.visible{ opacity: 1; }
          }
        }
        > .rangeHandle{
          user-select: none;
          position: absolute;
          cursor: col-resize;
          z-index: 8;
          top: 1px;
          width: 8px;
          pointer-events: none;
          &::before{ // The circle tip
            content: "";
            display: block;
            position: absolute;
            width: 6px;
            height: 8px;
            bottom: 0px;
            z-index: 2;
            background-color: white;
            border-width: 1px;
            border-color: black;
            border-style: solid;
            pointer-events: all;
          } 
          &::after{ // the bar
            content: "";
            position: absolute;
            display: none;
            width: 5px;
            height: calc(~"100% - 5px");
            cursor: col-resize;
            border-style: solid;
            border-width: 0px;
            border-color: var(--color_filter);
          }
          &:hover:after{ 
            background-color: var(--color_hoverAction) !important; 
            border: none !important;
            width: 8px;
          }
          &:hover:before{ border-color: var(--color_hoverAction) !important; }
          &.min{
            left: -8px;
            &:before{
              border-top-left-radius: 10px;
              border-bottom-left-radius: 10px;
            }
            &:after{ border-right-width: 3px; }
          }
          &.max{
            &:before{
              border-top-right-radius: 10px;
              border-bottom-right-radius: 10px;
            }
            &:after{ border-left-width: 3px; }
          }
          &.dragging:after{ 
            border-style: solid; 
            background-color: var(--color_filter);
          }

          > input.rangeInput{
            position: absolute;
            width: 50px;
            left: -25px;
            bottom: 0px;
            z-index: 10;
            border: solid 1px gray;
            box-shadow: 0 5px 15px -5px rgba(0,0,0,.5);
            border: 1px solid #ccc;
            border-bottom-color: #bbb;
            text-align: center;

            -moz-appearance: textfield;
            &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
              -webkit-appearance: none;
              margin: 0;
            }
          }
        }
      }
      > .valueTickGroup{
        cursor: default;
        position:relative;
        transition: left 750ms cubic-bezier(0.68, 0, 0.32, 1);
        > .valueTick{
          position:absolute;
          transition: left 750ms cubic-bezier(0.68, 0, 0.32, 1), var(--transition_opacity_slow);
          &.noAnim{
            transition: none;
          }
          > .text{
            top: -1px;
            font-size: 0.7em;
            font-weight: 300;
            position: relative;
            left: -50%;
            display: block;
            text-align: center;
            white-space: nowrap;
            cursor: pointer;
            > .unitName {
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
              max-width: 23px;
              display: inline-block;
              vertical-align: bottom;
              &:hover{ overflow: visible; }
            }
            > .secondLayer{ 
              font-weight: 400;
              display: block;
            }
          }
          > .line{
            position: absolute;
            top: -12px;
            height: 12px;
            border-left: solid 1px darkgray;
            display: block;
            pointer-events: none;
          }
          &:not(.major) {
            > .line { 
              border-color: darken(#D4D4D4, 10%); // color of the horizontal line
              height: 6px;
              top: -9px;
            }
            > .text{ display: none; }
          }
        }
      } // valueTickGroup
    } // intervalSlider

  .tooltipSummaryName{
    text-align: center;
    font-weight: 300;
    padding: 2px;
    font-size: 0.8em;
    background: var(--color_darkGrayBackground);
    border-bottom: solid 1px #F7F7F7;
    color: white;
  }
  .tooltipBreakdownHeader{
    border-top: solid 1px var(--color_darkGrayBackground);
    border-bottom: solid 1px lightgray;
    padding: 4px 8px 0px;
    background-color: #F7F7F7;
    font-weight: 400;
    text-align: center;
    font-size: 0.9em;
    > .BreakdownText{
      font-weight: 300;
    }
  }
  .tooltipBreakdownTable{
    font-size: 0.9em;
    padding: 0px 8px;
  }
  .percentageExplainer{
    padding: 2px 8px;
    border-top: solid 1px var(--color_background_Light-darken-15);
    font-size: 0.7em;
    color: gray;
    text-align: right;
    font-family: "Roboto Condensed", sans-serif;
  }

  .aggrTooltip{
    font-weight: 300; 
    padding: 2px 0px;
    .aggrRecordCount{
      text-align: center;
      padding: 2px 8px;
    }
    .percentValue{
      color: gray;
      text-align: right;
    }
    .measureValue{
      font-weight: 300; 
      text-align: right;
      padding: 0 6px;
    }
    .measureDetail{
      font-weight: 400;
      text-align: right;
    }
    .percentBlock{
      font-size: 0.8em;
      opacity: 0.6;
    }
    table{
      margin: 0 auto;
    }
  }

  .catChart.multiLine .catGlyph > .catLabelGroup > .catLabel{
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    white-space: normal;
  }

  .catGlyph{
    > .catLabelGroup_BG{
      position: absolute;
      left: 0px;
      top: 0%;
      z-index: -1;
      height: 100%;
    }

    > .catLabelGroup{
      display: flex;
      align-self: center;
      align-items: center;

      z-index: 21;

      padding-right: 5px;

      font-size: 0.8em;
      font-weight: 300;
      //line-height: 1.2em;

      border: solid 1px rgba(255,255,255,0);
      background-color: rgba(255,255,255,0);
      cursor: inherit;

      transition: var(--transition_bgcolor);

      > .lockButton{
        display: none;
        flex: 0 0 auto;
        font-size: 1em;
        width: 15px;
        margin: 0 1px;
      }

      > .filterButton{
        display: none;
        flex: 0 0 auto;
        opacity: 0;
        margin: 0px 2px 2px;
        cursor: pointer;
        color: var(--color_darkGrayBackground);
        transition: all 250ms;
        font-size: 0.9em;
        &:hover{ 
          color: var(--color_hoverAction);
          font-weight: 700;
        }
      }
      > .AndOrNot{
        flex: 0 0 auto;
        opacity: 0.6;
        display: none;
        line-height: 1.4em;
      }
      > .catLabelGap{
        flex: 1 auto;
      }
      > .catLabelOrder{
        display: none;
        color: gray;
        padding: 2px 2px 0px;
        vertical-align: top;
        cursor: ns-resize;
        font-size: 0.9em;
        &:hover{ color: var(--color_hoverAction); }
      }
      > .catLabelEdit{
        display: none;
        color: gray;
        padding-top: 2px;
        vertical-align: top;
        cursor: pointer;
        font-size: 0.9em;
        &:hover{ color: var(--color_hoverAction); }
      }
      > .catLabel{
        flex: 0 1 auto;
        min-width: 10px;
        padding: 0px 2px;
        pointer-events: none;
        transition: font-size 750ms linear;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        &:focus{
          background-color: var(--color_background_Light);
          color: black;
          outline: none;
          text-decoration: underline;
          color: var(--color_hoverAction);
        }
        &::selection {
          background: var(--color_background_Light); 
        }
        &::-moz-selection {
          background: var(--color_background_Light);
        }
      }

    } // catLabelGroup

    > .measureLabelGroup{
      display: block;
      position: relative;
      > .measureLabel{
        position: absolute;
        padding-top: 1px; // font content height issue.
        padding-right: 2px;
        text-align: right;
        z-index: 100;
        left: 0px;
        cursor: inherit;
        width: 100%;
      }
    }

    &[activeItems="0"] > .measureLabelGroup > .measureLabel{ visibility: hidden; }

    &.locked {
      > .catLabelGroup > .catLabel{ font-weight: 700; }
    }

    &.Compare_A > .catLabelGroup > .catLabel{ color: var(--color_Compare_A); }
    &.Compare_B > .catLabelGroup > .catLabel{ color: var(--color_Compare_B); }
    &.Compare_C > .catLabelGroup > .catLabel{ color: var(--color_Compare_C); }
    &.Compare_D > .catLabelGroup > .catLabel{ color: var(--color_Compare_D); }
    &.Compare_E > .catLabelGroup > .catLabel{ color: var(--color_Compare_E); }

    &.NoActiveRecords > .catLabelGroup > .lockButton{ display: none !important; };

    &[catFiltered] {
      cursor: pointer;
      > .catLabelGroup > .catLabel{ 
        font-weight: 600;
      }
      > .catLabelGroup_BG{ 
        background: linear-gradient(90deg, rgba(235,235,235,1) 0%, rgba(229,229,229,0) 100%) !important;
      }
    }
    &[catFiltered="AND"]{
      > .catLabelGroup > .catLabel{ color: var(--color_query_and); }
    }
    &[catFiltered="OR"]{
      > .catLabelGroup > .catLabel{ color: var(--color_query_or); }
      .AndOrNot_Or { display: block; }
    }
    &[catFiltered="NOT"]{
      > .catLabelGroup > .catLabel{ color: var(--color_query_not); }
      > .catLabelGroup > .catLabel{ text-decoration: line-through; }
      .AndOrNot_Not{ display: block; }
    }

    &.withRecordHighlight {
      > .catLabelGroup { 
        > .catLabel{
          color: var(--color_onRecord-darken-70);          
        }
      }
      > .catLabelGroup_BG{
        background-color: var(--color_onRecord) !important; 
        border: solid 1px var(--color_onRecord-darken-20);
      }
    }

    &.catMouseOver{
      cursor: pointer;
      > .catLabelGroup {
        > .filterButton, 
        > .lockButton{ 
          opacity: 1;
        }
      }
    }

    &:hover{
      > .catLabelGroup {
        > .filterButton, 
        > .lockButton{ 
          display: block;
          pointer-events: all;
        }
      }
    }
  }

  .measureDescrLabel{
    position: absolute;
    text-align: center;
    font-size: 0.8em;
    color: gray;
    font-weight: 300;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;

    font-family: "Roboto Condensed", sans-serif;
  }


  .catChart{
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    position: relative;
    min-height: 0px;
    transition: var(--transition_all_750ms);

    > .chartCatLabelResize{
      display: none;
      height: 100%;
      z-index: 25;
      margin-left: -4px;
    }

    > .aggrGroup{
      position: relative;
      overflow-y: hidden;
      overflow-x: hidden;
      display: block;
      z-index: 5;
      height: 100%;
      transition: var(--layout_transition);
      user-select: none;

      > .chartBackground{
        width: 100%;
        display: block;
        position: relative; // so label resize gets its full height.
      }
    } // .aggrGroup

    > .chartAxis_Measure {
      > .measureDescrLabel{
        bottom: -32px;
        width: 100%;
      }
      > .highlightedMeasureValue{
        top: 0px;
        height: 100%;
        border-left-width: 1px;
        margin-left: -1px;
        > .highlightedAggrValuePointer{
          bottom: -14px;
          left: -3px;
        }
      }
      > .tickGroup {
        height: 100%;
        > .tick{
          height: 100%;
          > .text{
            width: 30px;
            left: -15px;
            &.measureAxis_1{ bottom: -13px; }
            &.measureAxis_2{ top:    -12px; }
          }
          > .line{
            width: 0px;
            height: 100%;
            height: 100%;
            top: 0px;
            border-left-width: 1px;
            transition: var(--layout_transition);
          }
        }
      }
    } // chartAxis_Measure
  }


  .summaryInterval{
    padding-top: 7px;
    padding-right: 11px; // TODO: Set by JS
    // padding-left: 6px; // Set by JS
    overflow: hidden;
    transition: var(--transition_opacity_slow);
    &[scaletype="time"]{
      // Only hide the "span" nodes, not the path nodes.
      span[class^="measure_"]{ opacity: 0 !important; }
    }
    &[scaletype="step"]{
      .zoomControl[sign="plus"]{ display: none !important; }
    }
    &.zoomed{
      .zoomControl[sign="minus"]{ opacity: 1 !important; pointer-events: all !important; }
    }

    > .histogram{
      display: none;
      position:relative;
      pointer-events: all;
      margin-bottom: 12px;
      transition: height 750ms cubic-bezier(0.68, 0, 0.32, 1), var(--transition_opacity_slow);
      > .timeSVG{
        position: absolute;
        top: 0px;
        left: 0px;
        z-index: 3;
        height: 100%;
        width: 100%;
        border-bottom: solid 1px lightgray;
        transition: var(--transition_opacity_slow), height 700ms ease-in-out;
        // the limits of the SVG are exact limits of the chart, so if not visible, dots/lines cut off
        overflow: visible; 

        > [class$="measure_"]{ stroke-width: 1.5px; }
        > .measure_Area_Total{
          fill: var(--color_bars);
          fill-opacity: 0.33;
        }
        > .measure_Area_Active{
          fill: var(--color_bars);
          fill-opacity: 0.75;
          stroke: var(--color_bars);
          stroke-width: 1px;
          transition: fill-opacity 750ms;
          &.asLine{ stroke-width: 2px; }
        }
        > [class^="measure_Area_Compare_"] { 
          stroke-width: 2px;
          fill-opacity: 0;
          opacity: 0;
          transition: var(--transition_opacity_slow);
        }
        > .measure_Area_Compare_A{ stroke: var(--color_Compare_A); fill: var(--color_Compare_A); }
        > .measure_Area_Compare_B{ stroke: var(--color_Compare_B); fill: var(--color_Compare_B); }
        > .measure_Area_Compare_C{ stroke: var(--color_Compare_C); fill: var(--color_Compare_C); }
        > .measure_Area_Compare_D{ stroke: var(--color_Compare_D); fill: var(--color_Compare_D); }
        > .measure_Area_Compare_E{ stroke: var(--color_Compare_E); fill: var(--color_Compare_E); }
      }
      > .aggrGroup{
        position: absolute;
        top: 0px;
        // If this is set, it prevents background events from the other div layer
        // width: 100%;
        // height: 100%;
        z-index: 4;
        height: 100%;
        width: 100%;
        transition: var(--layout_animation);
        > .highlightRangeLimits{
          opacity: 0;
          width: 1px;
          background-color: orangered;
          position: absolute;
          z-index: 100;
          pointer-events: none;
          transition: var(--transition_opacity);
        }
      }
      > .chartAxis_Measure{
        width: 100%;
        > .measureDescrLabel{
          top: calc(~'50% - 0.5em');
          transform: translateX(-44px) rotate(270deg);
          transform-origin: 50% 50%;
        }
        > .highlightedMeasureValue{
          width: calc(~"100% + 10px");
          left: -5px;
          height: 2px;
          border-bottom-width: 1px;
          > .highlightedAggrValuePointer{ left: -10px; }
        }
        > .tickGroup{
          top: 100%;
          position: relative;
        }
        > .tickGroup > .tick{
          width: calc(~"100% - 21px");
          width: 100%;
          left: 0px;
          > .line{
            border-bottom-width: 1px;
            width: 100%;
            left: 0px;
            pointer-events: none;
          }
          > .text{
            width: 35px;
            top: -0.4em;
            &.measureAxis_1{
              right: 100%;
              padding-right: 2px;
              text-align: right;
            }
            &.measureAxis_2{
              left: 100%;
              padding-left: 2px;
              text-align: left;
            }
          }
        }
      }
    }
  } // summaryInterval


  .kshfBlock_Content{
    .contentWrapper{
      flex: 1;
      padding: 8px;

      display: flex;
      flex-direction: column;
      overflow: hidden;

      > .stepControls {
        display: flex;
        align-items: center;
        > .stepDots{
          text-align: center;
          display: flex;
          > .stepDot{
            margin: 2px;
            text-align: center;
            color: var(--color_background_Light-darken-15);
            cursor: pointer;
            transition: color 250ms;
            &:hover{ color: var(--color_hoverAction); }
            &.active{ color: var(--color_background_Dark); }
          }
        }
        > .dismissButton{
          color: gray;
          opacity: 0;
          margin: 0px 8px;
          font-size: 0.9em;
          font-weight: 300;
          cursor: pointer;
          transition: var(--transition_opacity);
          &:hover{
            text-decoration: underline;
            color: var(--color_hoverAction);
          }
        }
        > .stepControlGap{
          flex: 1;
        }
        > .stepButton{
          cursor: pointer;
          padding: 4px 8px ;
          border: solid 1px gray;
          margin-left: 8px;
          font-weight: 300;
          transition: all 250ms;
          > .fa{
            opacity: 0.7;
          }
          &:hover{
            border-color: var(--color_hoverAction);
            color: var(--color_hoverAction);
          }
          &.stepPrev{
            > .fa{ margin-right: 6px; }
          }
          &.stepClose{
            display: none;
          }
          &.stepClose, &.stepNext{
            font-weight: 500;
            > .fa{ margin-left: 6px; }
          }
        }
      }

      &:hover{
        > .stepControls > .dismissButton{ opacity: 1; }
      }

      &.firstStep .stepControls {
        > .stepPrev{ 
          pointer-events: none;
          opacity: 0;
        }
      }
      &.lastStep .stepControls {
        > .stepNext{ 
          display: none;
//          cursor: not-allowed;
//          opacity: 0.5;
        }
        > .stepClose{
          display: block;
        }
      }

      &.fullIframe{
        > .contentBlock{
          overflow-y: hidden;
          > iframe{
            width: 100% !important;
            height: 100% !important;
          }
        }
        padding: 0px !important;
      }
    }

    .contentBlock{
      flex: 1;
      overflow-y: auto;
      overflow-x: hidden;
      font-weight: 300;
      transition: var(--transition_opacity_slow);
      opacity: 1;
      text-align: justify;
      li {
        margin-bottom: 0.5em;
      }

      ul {
        list-style: none;
        padding: 0;
        margin: 0;
        > li {
          padding-left: 1.3em;
          &:before {
            content: "\f00c"; /* FontAwesome Unicode */
            font-family: "Font Awesome 5 Pro";
            display: inline-block;
            margin-left: -1.3em; /* same as padding-left set on li */
            width: 1.3em; /* same as padding-left set on li */
          }
        }
      }
    }
    .summaryConfigControl{
      display: none !important;
    }
  }

  .kshfSummary{
    flex: 0 1 auto;
    flex-basis: auto;
    display: flex;
    flex-direction: column;
    position: relative;
    transition: var(--transition-flex-750ms);
    user-select: none;
    min-height: 10px;
    margin-bottom: 8px;
    background-color: white;

    > .wrapper{
      flex: 1;
      display: flex;
      flex-direction: column;
      position: relative;
      overflow: hidden; // so that absolute positioned elements will not overflow
      transition: var(--layout_transition), var(--transition_opacity);
      border: solid 1px var(--color_background_Light-darken-15);
      border-width: 0px 1px 1px 1px;

      &.showMeasureAxis_2 .measureAxis_2 { display: block; }

      > .summaryCategorical{
        display: flex;
        flex: 1;
        flex-direction: column;
        overflow: hidden;
        height: 100%;
        transition: var(--transition_opacity_slow);
        opacity: 1;
        .catMap_Base{
          //height: 100%;
          flex: 1 1 auto;
          border: solid 1px var(--color_background_Light-darken-15);
        }
        > .summaryControls{
          border-bottom: solid 1px #E9E9E9;
          margin-top: -1px;
          position: relative;
          display: none;
          > .catTextSearch{
            display: none;
            vertical-align: top;
            padding-right: 5px;
            > .textSearchInput {
              display: inline-block;
              width: calc(~"100% - 13px");
              height: 15px;
              text-align: right;
              &::-webkit-input-placeholder { text-align: right; }
            }
            &.active{
              display: block;
            }
          } // catTextSearch

        } // summaryControls

        .selectAllAttribsButton{
          font-size: 0.6em;
          float: left;
          margin-left: 2px;
          font-weight: 300;
          color: black;
          border: solid 1px lightgray;
          border-radius: 10px;
          padding: 1px 5px 0px 5px;
          background-color: rgba(150,150,100,0.2);
          cursor: pointer;
          &:hover{ box-shadow: 0px 0px 1px black; }
          &::before{ content: "+ Add Filter with All"; }
        }
        .scroll_display_more{
          display: block;
          font-size: 0.7em;
          color: #b7b7b7;
          opacity:1;
          pointer-events: all;
          font-weight: 300;
          padding: 0px 4px;
          > .belowCount{ 
            display: none; 
            cursor: pointer;
            &:hover{ color: var(--color_hoverAction); }
          }
          > .fa{ color: gray; }
        }

        &.nobottoms{
          .belowCatChart{ display: none; }
        }

        &:hover {
          .catSortButton{ opacity: 1; }
          .scroll_display_more {
            > .belowCount{ display: inline; }
            > .rowCount.hasMore{ display: none; }
          }
        }

        .catMap_SVG{
          position: relative;
          left: 0px;
          top: 0px;
          overflow: visible;
        }
        .catMap_Base{
          background-color: var(--color_mapBackground);
        }
        .leaflet-zoom-anim {
          .catMap_SVG{ display: none; }
          .spatialQueryBox{ display: none !important; }
        }
      }// summaryCategorical
    } //

    &.collapsed{
      flex: 0 0 23px;
      //flex-basis: 23px !important;
      .buttonSummaryCollapse,
      .summaryConfigControl,
      .deriveSummaryButton,
      .summaryConfig,
      .noValueAggr,
      .summaryViewAs{ display: none !important; }

      .buttonSummaryOpen{ display: inline-block !important; }
      .summaryCategorical{ 
        opacity: 0;
        pointer-events: none;
      }
      .summaryInterval{
        opacity: 0;
        pointer-events: none;
      }
      .contentBlock{
        opacity: 0;
        pointer-events: none;
      }

      > .wrapper{ border-color: rgba(255,255,255,0); }

      > .headerGroup .summaryName{ cursor: pointer; }
    }
    &:not(.collapsed){
      &:hover {
        .summaryViewAs{ opacity: 1; }
      }
      > .headerGroup[allCatsInDisplay="false"] .buttonSummaryExpand { display: inline-block !important; }
    }

    &.filtered_missing{
      .rangeHandle{ display: none !important; }
      .base_Active{ display: none !important; }
      .zoomControl{ display: none !important; }
    }
    &.filtered{
      > .headerGroup{
        .clearFilterButton{ opacity: 1; pointer-events: all; }
      }
      .rangeHandle{
        pointer-events: all !important;
        &:after{ display: block !important; }
      }
      &:hover > .wrapper > .summaryInterval > .intervalSlider > .zoomControl{ opacity: 1; pointer-events: all; }
    }

    &.isMultiValued{
      &.hasMultiAnd{
        .catGlyph[catFiltered="AND"] .AndOrNot_And { display: block; }
      }
    }
    &.supportsSetMatrix[viewType="list"]{
      .headerGroup > .summaryIcons > .setMatrixButton{ display: flex; }
    }

    &.disableCompareLock{
      .summaryLockButton{ visibility: hidden; }
      .lockButton{ display: none !important; }
    }

    &:hover{
      //box-shadow: 0px 0px 2px #646464, 0px 0px 5px #999;
      //z-index: 3;
      > .headerGroup{
        border: solid 1px var(--color_background_Dark);
        z-index: 10;
        > .iconGroup > {
          .fa, .far, .fal{ opacity: 1; }
        }
      }
      .catChart > .aggrGroup{ overflow-y: auto; }
    }

    &.hideActive{
      .measure_Active,
      .measure_Area_Active,
      .aggrGlyph:not(.noValueAggr) .measureLabel_Active{ 
        opacity: 0 !important; 
        pointer-events: none !important;
        fill-opacity: 0 !important;
      }
    }


    &[hasMap="true"]:not(.collapsed){
      .summaryViewAs_map,
      .summaryViewAs_list{
        display: flex;
      } // Display both map and list
    }
    &:not([viewType="map"]) .visViewControl > span[class^="MapControl"]    { display: none; }
    
    &[viewType="map"]{
      z-index: 1;
      .visViewControl{ 
        display: flex;
      }
      .wrapper > .noValueAggr{ display: none }

      .visViewControl > .mapView-UnmatchedData.active{
        display: inline-block;
      }

      .chartDescription{
        display: block;
      }

      .mapGlyphColorSetting{
        display: flex;
        background: white;
        box-shadow: 0 0px 3px rgba(0,0,0,0.65);
        .colorOptions{
          display: flex;
          > .colorThemeOptions{
            display: flex;
            margin-left: 6px;
            position: relative;
            > .editColorTheme{
              width: 100%;
              padding: 2px 2px 4px;
              text-align: center;
              height: auto;
              &[data-color="Compare_A"]{ background-color: var(--color_Compare_A); color: white !important; }
              &[data-color="Compare_B"]{ background-color: var(--color_Compare_B); color: white !important; }
              &[data-color="Compare_C"]{ background-color: var(--color_Compare_C); color: white !important; }
              &[data-color="Compare_D"]{ background-color: var(--color_Compare_D); color: white !important; }
              &[data-color="Compare_E"]{ background-color: var(--color_Compare_E); color: white !important; }
            }
          }
          > .mapColorScaleGroup{
            //margin-left: 6px;
            > .mapColorHighlightedValue{
              color: var(--color_Compare_A);
              text-shadow: 0px 0px 2px white,0px 0px 2px white, 0px 0px 2px white;
            }
          }
        }
      }

      .catSummary_ListOnly{
        display: none !important;
      }

      .summaryCategorical{
        .chartAxis_Measure,
        > .catChart > .aggrGroup{
          display: none !important;
        }
        > .summaryControls{
          position: absolute;
          bottom: 5px;
          left: 5px;
          box-shadow: 0 0 3px rgba(0, 0, 0, 0.65);
          padding-left: 0px;
          z-index: 2000;
          background: white;
          > .catTextSearch{
            width: 150px !important;
          }
        }
      }
    }

    &[viewType="list"]{
      .catMap_Base,
      .visViewControl.ViewControlGroup{ 
        display: none;
      }
    }

    &.kshfSummary_Categorical{
      &[viewType="dropdown"]{
        .summaryConfigControl
        {
          display: none;
        }
        > .wrapper{
          overflow: visible; // lets the dropdown's dropdown remain visible
          > .summaryCategorical{
            overflow: visible;
          }
        }
        .noValueAggr{ display: none !important; }
      }
    }

    &.chartVisibleHistogram{
      .histogram{ display: block !important; }
    }

    &.chartVisiblePercentile{
      .percentileGroup {
        > .percentileChart_Active > .quantile{ height: 28px; }
      }
    }

    &.kshfSummary_Timestamp{
      .histogram > .aggrGroup > .aggrGlyph > .measureGroup{ opacity: 0; }
      .measureLabel{
        text-shadow: 0px 0px 1px white, 0px 0px 3px white;
      }
    }

    &.kshfSummary_Interval{
      .noValueAggr{
        flex-direction: column-reverse;
        align-items: flex-start;
      }
    }


    &.kshfSummary_Interval:not(.chartVisibleHistogram){
      .summaryConfig_BinHeight, 
      .summaryConfig_BinWidth{
        display: none;
      }
      .intervalRange,
      .intervalSlider{ margin-top: 0px !important; }
    }
    &:not(.chartVisiblePercentile){
      .percentileGroup{ display: none; }
    }

    &:not(.chartVisiblePercentile.chartVisibleHistogram){
      .intervalSlider {
        > .controlLine > .base_Total {
          height: 6px !important;
          top: 2px !important;
        }
        > .valueTickGroup > .valueTick.major > .line{
          border-left-width: 2px;
        }
        > .valueTickGroup > .valueTick:not(.major) > .line{
          border-color: darken(#D4D4D4, 30%) !important;
        }
      }
    }

    &.showConfig{
      .summaryConfig{
        opacity: 1;
        pointer-events: all;
        &.onBottom{ top: 100%; }
        &.onTop{ bottom: 100%; }
        &.onRight{ left: 100%; }
        &.onLeft{ right: 100%; }
      }
      .summaryConfigControl{ 
        opacity: 1 !important;
        pointer-events: all !important;
        color: black !important;
        animation: fa-spin 4s infinite linear;
      }
    }

    &.setPairSummary{ 
      display: none;
      position: absolute;
      top: 0px;
      height: 100%;
      background-color: white;
      > .headerGroup > .iconGroup{ display: none; }
      &[data-popupSide="left"]{
        right: 100%;
        .sizeLegend{ left: 10px; }
        .belowMatrix{ text-align: right; }
        .rows > .row > .catLabel{ text-anchor: end; }
        > .wrapper{
          //border-right-color: rgba(1,1,1,0); // transparent
          border-right-width: 0px;
        }
      }
      &[data-popupSide="right"]{
        left: 100%;
        .sizeLegend{ right: 0px; }
        .belowMatrix{ text-align: left; }
        .rows > .row > .catLabel{ text-anchor: start; }
        > .wrapper{
          //border-left-color: rgba(1,1,1,0); // transparent
          border-left-width: 0px;
        }
      }
    }

    // appears within measureGroup
    .setMatrixLine{
      position: absolute;
      width: 100%;
      top: 50%;
      height: 1px;
      background-color: #DADADA;
      z-index: -1;
      display: none;
    }

    &.show_set_matrix > {
      .setMatrixButton{ 
        .activeViewOption();
      }
      .kshfSummary.setPairSummary{ display: flex; }
    }
  }


  .highlightedMeasureValue{
    position: absolute;
    transition: transform 250ms ease-in-out, var(--transition_opacity);
    opacity: 0;
    border-color: var(--color_axis_line);
    border-style: solid;
    border-width: 0px;
  }

  .belowCatChart{
    flex-shrink: 0; // do not shrink this box in chart layout

    display: flex;
    flex-direction: row-reverse;
    align-items: center;

    > .gap{
      flex-grow: 1;
    }

    > .noValueAggr{
      position: unset;
    }
  }
  .catSortButton{
    display: block;
    padding: 0px 12px;

    opacity: 0.3;
    color: gray;
    text-align: right;
    transition: all 250ms;
    cursor: pointer;
    &:hover{ color: var(--color_hoverAction); }
  }
  .reverseSortIcon{
    transform: scale(1, 1) rotate(90deg);
    transition: 250ms linear;
    &.active{ 
      transform: scale(1,-1) rotate(90deg);
      &:hover{ transform: scale(1, 1) rotate(90deg); }
    }
  }
  [data-itemid="reverseSort"]:hover .reverseSortIcon{
    transform: scale(1,-1) rotate(90deg);
    &.active{ transform: scale(1, 1) rotate(90deg); }
  }

  [data-itemid="DynamicSort"] .comparedSummaryName{
    display: inline-block;
    vertical-align: top;
    max-width: 100px;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-left: 0.2em;
  }

  // *******************************************************************
  // *******************************************************************
  // MEASURE LABEL STYLES
  .measureLabel{
    font-size: 0.7em;
    pointer-events: none;
    transition: var(--transition_transform_bar), var(--transition_opacity_slow), line-height 750ms cubic-bezier(0.68, 0, 0.32, 1), 750ms line-height ease-in-out, width 750ms cubic-bezier(0.68, 0, 0.32, 1);
    &.hidden{
      pointer-events: none !important;
      &:not(.forceShow){ opacity: 0 !important; }
    }
  }

  .measureLabel_Active{ color: var(--color_item_count); }

  [class*="measureLabel_Compare"]{ opacity: 0; }
  .measureLabel_Compare_A{ color: var(--color_Compare_A);  fill: var(--color_Compare_A); }
  .measureLabel_Compare_B{ color: var(--color_Compare_B);  fill: var(--color_Compare_B); }
  .measureLabel_Compare_C{ color: var(--color_Compare_C);  fill: var(--color_Compare_C); }
  .measureLabel_Compare_D{ color: var(--color_Compare_D);  fill: var(--color_Compare_D); }
  .measureLabel_Compare_E{ color: var(--color_Compare_E);  fill: var(--color_Compare_E); }

  .measureLabel_Dynamic{ color: var(--color_item_count); }

  &.stackedCompare{

    [class^="measure_Area_Compare_"]{
      fill-opacity: 1 !important;
      stroke-width: 1px !important;
      stroke: white !important;
    }

    .aggrGlyph > g.measureGroup{ // setPairGlyph, clusterGlyph
      > .measure_Compare_A{ fill: var(--color_Compare_A); }
      > .measure_Compare_B{ fill: var(--color_Compare_B); }
      > .measure_Compare_C{ fill: var(--color_Compare_C); }
      > .measure_Compare_D{ fill: var(--color_Compare_D); }
      > .measure_Compare_E{ fill: var(--color_Compare_E); }
    }

    .panel:not(.hideCatBars) .catGlyph > .measureLabelGroup{
      width: 0px !important;
      z-index: 1;
      > .measureLabel{
        color: white !important;
        text-shadow: 0px 0px 1px black, 0px 0px 4px black;
        font-weight: 500;
        &.measureLabel_Active{
          color: var(--color_background_Dark) !important;
          text-shadow: 0px 0px 1px white, 0px 0px 4px white;
        }
        &[labelalign="right"]{
          text-align: right;
        }
        &[labelalign="left"]{
          text-align: left;
          padding-left: 3px;
        }
        &[labelalign="middle"]{
          text-align: center;
          padding-right: 0 !important;
        }
      }
    }

  }

  &.stackedChart{
    .measure_Area_Compare_A{
      fill: var(--color_Compare_A) !important;
    }
    .summaryInterval[scaletype="time"] .measureLabel_Compare_A{
      color: white !important;
      text-shadow: 0px 0px 1px black, 0px 0px 4px black !important;
      font-size: 0.8em;
      font-weight: 500;
    }
    .rangeGlyph > .measureLabelGroup{
      >.measureLabel_Active{
        color: var(--color_background_Dark) !important;
      }
      > .measureLabel{
        font-weight: 500;
        font-size: 0.8em;
        top: -0.5em;
        color: white !important;
        text-shadow: 0px 0px 1px black, 0px 0px 4px black;
        &.measureLabel_Active{
          color: var(--color_background_Dark) !important;
          text-shadow: 0px 0px 1px white, 0px 0px 4px white;
        }
      }
    }
    #kshfLineChartTip_Compare_A{ fill: white; }
    #kshfLineChartTip_Compare_B{ fill: white; }
    #kshfLineChartTip_Compare_C{ fill: white; }
    #kshfLineChartTip_Compare_D{ fill: white; }
    #kshfLineChartTip_Compare_E{ fill: white; }
  }


  // ***********************************************************
  // ***********************************************************

  .recordAxis{
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0px;
    left: 0px;
    .tickLine{ 
      top: 0px; 
      border-style: dotted;
      border-width: 0px;
      pointer-events: none;
    }
    .tickText{ position: relative; }
    > .tickGroup{
      height: 100%;
      width:  100%;
      position: relative;
      .tickLine{ 
        border-color: var(--color_axis_line);
        opacity: 0.7;
      }
    }
    > .keyLine{
      display: none;
      position: absolute;
      background-color: var(--color_background_Dark);
      top: 0px;
      left: 0px;
    }
    > .onRecordLine{
      display: inline;
      position: absolute;
      opacity: 0;
      top: 0px;
      transition: var(--transition_opacity);
      > .tickLine{
        position: absolute;
        border-color: #d0be96;
      }
      > .tickText{
        background-color: lighten(#d5c5a2, 20%);
        border: solid 1px #d5c5a2;
        font-weight: 700;
        font-size: 0.8em;
      }
    }
  }

  .recordAxis {
    .hmTicks.hideLabel > .tickText{ display: none }
  }

  .recordAxis_X{
    .tickLine { height: 100%;  }
    .tickText{
      padding-top: 1px;
      left: -50%;
      top: 100%;
      text-align: center;
    }
    > .tickGroup > .hmTicks{
      height: 100%;
      > .tickLine{ border-left-width: 1px; }
    }
    > .keyLine{
      height: 100%;
      width: 2px;
      margin-left: -1px;
    }
    > .onRecordLine {
      height: 100%;
      > .tickLine{ border-width: 0px 1px 0px 1px; }
    }
  }

  .recordTrail{
    transition: var(--transition_opacity);
    .recordTrail_Path{
      pointer-events: none;
      fill: none;
      stroke: var(--color_onRecord-darken-20);
    }
    > circle{
      pointer-events: none;
      fill: var(--color_onRecord-darken-20);
      //fill: none;
      stroke: var(--color_onRecord-darken-50);
    }
  }

  .recordAxis_Y{
    .tickLine{ width: 100%; }
    .tickText{
      padding-right: 1px;
      right: calc(~"100% + 5px");
      // TODO: width_scatter_margin_left needs to be dynamic to adjust for different needs.
      width: var(--width_scatter_margin_left);
      //right: 100%; 
      top: -0.5em;
      text-align: right;
    }
    > .tickGroup > .hmTicks{
      width: 100%;
      > .tickLine{ border-top-width: 1px; }
      > .tickText{ position: absolute; }
    }
    > .onRecordLine {
      width: 100%;
      > .tickLine{ border-width: 1px 0px 1px 0px; }
      > .tickText{ 
        margin-top: -1px;
        position: absolute;
        right: 100%;
        width: auto;
      }
    }
  }

  .hmTicks{
    position: absolute;
    cursor: default;
    opacity: 0;
    // z-index: -1;
    transition: var(--transition_opacity_slow), transform 700ms ease-in-out;
    > .tickText{
      display: inline-block;
      white-space: nowrap;
      font-weight: 200;
      font-size: 0.8em;
      user-select: none;
      transition: var(--transition_opacity);
    }
    > .tickLine{ 
      position: absolute;
      left: 0px;
    }
    &.lineAtZero > .tickLine { border-color: #999 !important;  }
    &.minor {
      > .tickLine{ border-color: var(--color_axis_line_light); };
      > .tickText{ opacity: 0; pointer-events: none; }
    }
    &.zero{
     > .tickText{ font-weight: 400; } 
    }
  }

  .selectVertLine {
    display: inline-block;
    background-color: #EEDDDE;
    width:2px;
    display:none;
    position:absolute;
  }

  .middleColumn{
    grid-area: panelMiddle;
    display: flex;
    flex-direction: column;
  }

  .recordDisplay_ViewAs_scatter{
    > svg { fill: gray; display: inline-block; width: 13px; } 
    &:hover > svg { fill: var(--color_hoverAction); }
  }

  // shared by network and scatterplot views
  .recordGroup_Scatter, .recordGroup_NodeLink{
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0px;
    left: 0px;
    overflow: visible;
    user-select: none;
    transform-origin: top left;
    transition: transform 700ms ease-in-out;
    > svg{
      display: block;
      height: 100%;
      width: 100%;
      overflow: visible;
    }
    .kshfRecord{
      transition: var(--transition_opacity), stroke 250ms linear, transform 700ms ease-out;
      &.noTransition{
        transition: var(--transition_opacity), stroke 250ms linear !important;
      }
      .recordText{
        display: inline;
        fill: gray;
        font-weight: 300;
        text-shadow: 0px 0px 6px white, 0px 0px 3px white;
        transform: translate(10px,-5px);
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
      }
    }
  }

  // ********************************************************************
  // ********************************************************************
  // ********************************************************************

  .visViewControl{
    display: none;
    position: absolute;
    left: 5px;
    top: 5px;
    z-index: 1000;
    box-shadow: 0 0 3px rgba(0, 0, 0, 0.65);

    font-weight: 300;

    background-color: white;

    user-select: none;

    > .LinkControl-LinkIcon{ display: none; }
    // play & pause needs to have same width
    > .NodeLinkControl-LinkAttrib{
      display: none;
      font-weight: 300;
      font-size: 0.8em;
      padding: 1px 7px;
      &:before{ content: "Link: "; }
    }
    > .NodeLinkControl-AnimPlay { width: 20px; }
    > .NodeLinkControl-AnimPause{ width: 20px; }
  }

  .TimeseriesControlGroup{ 
    display: none;
    .ChartControlGroupTitle{ 
      padding: 2px 5px;
      font-family: "Roboto Slab";
      font-weight: 400;
      border-left: solid 1px lightgray;
    }
    &.TimeseriesControlGroup-MouseMode{
      padding-right: 0px;
    }
    .visViewControlButton{
      &.ControlOption{
        padding: 2px;
        border-left: solid 1px lightgray;
        border-right: solid 1px lightgray;
        color: gray;
        font-family: "Roboto Slab";
        &.active{
          color: white; 
          background-color: #7b7b7b; 
          cursor: default;
          border-left-color: #7b7b7b; 
          border-right-color: #7b7b7b; 
        }
      }
    }
    .compareTimeKeySelect{
      font-size: 0.8em; 
      font-family: "Roboto Slab";
      margin: -3px 0px;
      position: relative;
      top: -2px;
    }
  }
  .NodeLinkControlGroup{   display: none; }
  .ClickModeControlGroup{
    display: none; // display: flex;
    font-weight: 300;
    cursor: default;
    justify-content: center;
    > .ChartControlGroupTitle{ display: none }
  }
  .ViewControlGroup{
    display: flex;
    flex-direction: column;
    cursor: default;
    padding: 0px 5px;
    transition: all 500ms;
    > .ChartControlGroupTitle{ display: none }
    > .visViewControlButton{ 
      color: #9e9e9e;
      display: inline-block;
      transition: all 250ms;
      &:hover { color: var(--color_hoverAction); }
    } 
  }
  .ChartControlGroupTitle { 
    padding: 5px 3px;
    cursor: default;
    font-size: 1em;
    white-space: nowrap;
    font-weight: 400;
    color: #545454;
  }
  .ChartControlGroup{
    align-self: center;
    white-space: nowrap;
    padding: 0px 5px;
    color: #9e9e9e;
    &:hover {
      > .ChartControlGroupTitle{
        color: var(--color_hoverAction);
      }
    }
  }
  .visViewControlButton{
    display: block;
    cursor: pointer;
    padding: 5px 3px;
    &:not(.active):hover{
      color: var(--color_hoverAction) !important;
    }
    &.mapView-UnmatchedData{
      display: none;
      text-align: center;
      color: gray;
      align-self: center;
      font-size: 1.1em;
      font-weight: 700;
      font-family: "Arial, sans-serif";
    }
    &.ControlOption{
      color: lightgray;
      font-weight: 300;
      user-select: none;
      > .icon{
        display: inline-block;
        width: 1em;
        height: 1em;
        text-align: center;
      }
      > .text > .ifActive{ display: none; }
      &.active{
        color: black;
        cursor: default;
        > .text > .ifActive{ display: inline-block; }
      }
    }
  }

  .ScatterControl-ScatterAttrib{
    display: block;
    font-weight: 300;
    font-size: 0.8em;
    padding: 2px;
    font-size: initial;
    width: auto; // by default, fixed width
  }
  .ScatterControl-SwapAxis{
    position: absolute;
    display: none;
    padding: 2px;
    left: -6px;
    bottom: -6px;
    transform: translate(-100%,100%);
    font-size: 1em;
    cursor: pointer;
    color: gray;
    &:hover{
      background-color: #EEE;
      color: var(--color_hoverAction);
    }
    > .fa-exchange{ transform: rotate(45deg); }
  }

  // ********************************************************************
  // ********************************************************************
  // ********************************************************************

  .recordBase_NodeLink{
    display: none;
    right: 0px;
    border-left: solid 1px lightgray;
    border-bottom: solid 1px lightgray;
    flex: 1 1 auto;
  }

  .recordBase_Timeseries{
    width: 100%;
    flex: 1 1 auto;
    margin-bottom: 55px;
    position: relative;
    top: 25px;
    transition: var(--transition_all_750ms);
    
    > .recordAxis.recordAxis_Y{ 
      border-bottom: solid 1px lightgray;
    }

    > .ts_annotations{
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0px;
      left: 0px;
      pointer-events: none;
      > .annotation{
        position: absolute;
        top: 0px;
        height: 100%;
        pointer-events: all;
        > .annotIcon{
          position: absolute;
          bottom: 100%;
          color: gray;
          width: 16px;
          left: -8px;
          top: -1.1em;
          text-align: center;
          font-size: 0.9em;
        }
        > .line{
          position: absolute;
          top: 0px;
          left: -5px;
          height: 100%;
          width: 10px;
          &:after{
            content: "";
            border-left: dashed 2px gray;
            position: absolute;
            height: 100%;
            left: 4px;
          }
        }
        > .textBox{
          display: none;
          position: absolute;
          top: 0px;
          left: 0px;
          width: 200px;
          background-color: white;
          border: solid 1px var(--color_hoverAction);
          padding: 0.5em;
          font-weight: 300;
          font-size: 0.8em;
          > .timeText{
            font-weight: 700;
          }
        }
        &:hover {
          z-index: 2;
          > .line:after{
            border-left: solid 2px var(--color_hoverAction);
          }
          > .textBox{
            display: block;
          }
        }
      }
    }
  }
  #recordLineClippath > rect{
    transition: var(--transition_all_750ms);
  }
  .recordBase_Scatter{
    right: 0px;
    border-left: solid 1px lightgray;
    border-bottom: solid 1px lightgray;
    flex: 1 1 auto;
    margin-left: var(--width_scatter_margin_left);
    margin-bottom: var(--height_scatter_margin_bottom);
    > .recordGroup_Scatter_Wrapper{
      overflow: hidden;
      width: 100%;
      height: 100%;
      position: absolute;
      left: 0px;
      top: 0px;
    }
    > .recordGroup_Scatter_XAxis_Options{
      position: absolute;
      bottom: -50px;
      left: 50%;
      transform: translateX(-50%);
    }
    > .recordGroup_Scatter_YAxis_Options{
      position: absolute;
      top: 0px;
      right: 100%;
      width: var(--width_scatter_margin_left);
      height: 100%;
      > .scatterYControlGroup{
        display: block;
        top: 50%;
        position: absolute;
        left: 5px;
        .choices__list--dropdown.is-active{
          transform: rotate(90deg) translate(0px, -75%);
          transform-origin: 0% 0%;
        }
      }
      .detailGroup.detailRange{
        display: none !important;
      }
    }
  }
  .recordBase_NodeLink{
    width: calc(~"100% - var(--width_scatter_margin_left)");
    height: calc(~"100% - 50px");
  }

  .panel_middle.hasBlocks + .recordDisplay{
    margin-bottom: var(--panelGapSize);
  }

  .recordDisplay{
    // fill remaining space, 30px is the header area, helpful for smooth transitions on collapse
    flex: 1 1 30px; 

    display: flex;
    flex-direction: column;
    position: relative;

    overflow: hidden; // Don't remove!

    background-color: white;

    transition: var(--transition-flex-750ms);

    .recordSortVizHost{ 
      flex: 0 0 auto;
      width: var(--list_sortVizWidth);
      display: none; 
      align-self: center;
      height: 1em;
      max-height: 100%;
      position: relative;
      margin: 0px 2px;
      cursor: pointer;
      background-color: var(--color_background_VeryLight);
      > .recordSortViz{
        width: 1px;
        height: 100%;
        background-color: var(--color_recordBar);
        position: relative;
        transform-origin: top left;
      }
    }
    .recordSparklineVizHost{
      flex: 0 0 auto;
      width: var(--list_sparklineVizWidth);
      display: none;
      vertical-align: top;
      margin: 4px;
      > svg {
        height: 30px;
        width: 100%;
        overflow: visible;
        display: block;
        > path{
          fill: none;
          stroke: var(--color_recordBar);
          stroke-width: 2px;
        }
        > g {
          cursor: pointer;
          > circle{
            fill: var(--color_background_Light);
            stroke: var(--color_recordBar);
          }
          > text{
            display: none;
            text-anchor: middle;
            fill: gray;
            font-size: 0.8em;
            font-weight: 400;
            text-shadow: 0 0 1px white, 0 0 1px white, 0 0 1px white, 0 0 3px white, 0 0 3px white, 0 0 5px white;
          }
          &.upper > text{
            transform: translateY(-20px);
          }
          &:hover > circle { fill: var(--color_Compare_A); }
        }
        &:hover{
          > g > text{ display: block; }
        }
      }
    }
    &.sortAttribOnTimeseries{
      .recordSparklineVizHost{ display: block; }
    }

    span[class^="MapControl"] { display: none; }

    > .dropZone{
      background: white;
      font-size: 1.4em;
    }

    [class^="recordBase_"]:not(.recordBase_Map){
      display: none;
      position: relative;
    }

    .spatialQueryBox{
      display: none;
      position: absolute;
      border-width: 2px;
      border-style: solid;
      z-index: 800;
      pointer-events: none;
      transition: var(--transition_opacity);
      > .clearFilterButton{
        position: absolute;
        left: -2px;
        top: -2px;
        pointer-events: all;
        font-size: 0.8em;
        line-height: 1.2em;
        opacity: 1;
        border: none;
        &:hover{ 
          color: var(--color_hoverAction);
          background-color: white !important;
        }
      }
      > .dragSelection{
        display: none;
        position: absolute;
        right: -0.5em;
        bottom: -0.5em;
        pointer-events: all;
        cursor: pointer;
        font-size: 20px; // absolute size bc leaflet messes up the font default size...
        border-radius: 50%;
        color: white;
        text-shadow: 0px 0px 3px gray;
        &:hover{ 
          color: var(--color_hoverAction);
          text-shadow: 0px 0px 3px white;
        }
      }
      > [class^="setSize"]{
        display: none;
        position: absolute;
        pointer-events: all;
        background-color: var(--color_hoverAction);
        opacity: 0;
        transition: var(--transition_opacity);
        &:hover{ opacity: 1; }
        &.setSize-l, &.setSize-r{
          cursor: ew-resize;
          height: 100%;
          width: 6px;
        }
        &.setSize-t, &.setSize-b{
          cursor: ns-resize;
          width: 100%;
          height: 6px;
        }
        // 2px is border width of the parent box
        &.setSize-l{ left: -2px;}
        &.setSize-r{ right: -2px;}
        &.setSize-t{ top: -2px;}
        &.setSize-b{ bottom: -2px;}
      }
      &.active{
        display: block;
        > .clearFilterButton{ display: block; }
      }

      &.spatialQueryBox_Filter   { 
        border-color: var(--color_filter);
        color: var(--color_filter); 
        box-shadow : 0px 0px 20px var(--color_filter-darken-20);
        > .clearFilterButton{
          border-color: var(--color_filter);
          background-color: var(--color_filter);
        }
        > .dragSelection{ display: block; }
        > [class^="setSize"]{ display: block; }
      }
      &[class*="spatialQueryBox_Compare"]{
        > .clearFilterButton:before{ content: "\f023"; }
      }
      &.spatialQueryBox_Compare_A{ 
        border-color: var(--color_Compare_A);
        color: var(--color_Compare_A); 
        box-shadow : 0px 0px 20px var(--color_Compare_A);
        > .clearFilterButton{ background-color: var(--color_Compare_A); }
      }
      &.spatialQueryBox_Compare_B{ 
        border-color: var(--color_Compare_B);
        color: var(--color_Compare_B); 
        box-shadow : 0px 0px 20px var(--color_Compare_B);
        > .clearFilterButton{ background-color: var(--color_Compare_B); }
      }
      &.spatialQueryBox_Compare_C{ 
        border-color: var(--color_Compare_C);
        color: var(--color_Compare_C);
        box-shadow : 0px 0px 20px var(--color_Compare_C);
        > .clearFilterButton{ background-color: var(--color_Compare_C); }
      }
      &.spatialQueryBox_Compare_D{ 
        border-color: var(--color_Compare_D);
        color: var(--color_Compare_D); 
        box-shadow : 0px 0px 20px #7A7A77, 0px 0px 10px #7A7A77;
        > .clearFilterButton{ background-color: var(--color_Compare_D); }
      }
      &.spatialQueryBox_Compare_E{ 
        border-color: var(--color_Compare_E);
        color: var(--color_Compare_E); 
        box-shadow : 0px 0px 20px #7A7A77, 0px 0px 10px #7A7A77;
        > .clearFilterButton{ background-color: var(--color_Compare_E); }
      }
    }

    .recordBase_Map{
      display: none;
      flex: 1 1 auto;
      background-color: var(--color_mapBackground);
    }

    .recordMap_SVG{
      display: block;
      position: relative;
      height: 100%;
      left: 0px;
      top: 0px;
      overflow: visible;
      pointer-events: none;
    }

    .recordGroup_List{
      display: none;
      flex: 1 1 auto;
      max-height: 100%;
      > .recordGroup{
        flex: 1;
        width: 100%;
        overflow-y: scroll;
        overflow-x: hidden;
        position: relative;

        background-color: white;
        // height is set dynamically by JavaScript
        transition: var(--layout_transition);
      } // recordGroup

      &.animatedList{
        > .recordGroup > .kshfRecord{
          position: absolute;
          top: 0px;
          left: 0px;
          transition: transform 500ms cubic-bezier(0.68, 0, 0.32, 1); //500ms delay
        }
      }
    }

    .dragWidthHandle{
      display: none;
      z-index: 200;
      height: 100%;
      top: 0px;
      left: -1px;
    }

    &.hideLinks {
      .recordLink { display: none; }
      .LinkControl-LinkIcon{ color: #BABABA; }
    }

    &[visMouseMode="pan"]{
      .MouseMode-pan { color: black;     cursor: default; }
      // previously .cursorGrab(). It's the most visible cursor, can remain default
      .recordBase_Map{ cursor: default; } 

      .recordGroup_Scatter{ .cursorGrab(); }
      .recordBase_NodeLink{ .cursorGrab(); }
    }
    &[visMouseMode="filter"]{
      .MouseMode-filter{ color: black; cursor: default; }
      
      .recordBase_Map{ 
        cursor: crosshair;
        g.kshfRecord{ 
          pointer-events: none;
          > path{ pointer-events: none !important;}
        }
      }
      .recordGroup_Scatter{ cursor: crosshair; }
      .recordBase_NodeLink{ cursor: crosshair; }
      .timeSelectArea{ pointer-events: all; }
    }

    &.collapsed{
      flex: 0 0 auto;
      margin-bottom: 1px;

      .recordDisplayWrapper{ 
        height: 0px !important; 
        flex-basis: 0px; 
        opacity: 0; 
        border: none;
        pointer-events: none;
      }

      .timeAnimation,
      .recordTextSearch,
      .recordDisplay_ViewGroup,
      .recordDisplayConfigButton,
      .buttonRecordViewCollapse{ 
        display: none !important;
      }

      .buttonRecordViewExpand{ display: block; opacity: 1; }
    }
    &:not(.collapsed){
      .recordDisplayHeader > .recordDisplayName{
        display: none;
      }
    }
    &:hover{
      .recordReverseSortButton,
      .removeRecordPanelButton,
      .buttonRecordViewCollapse,
      .recordDisplayConfigButton{
        opacity: 1 !important;
      }
      .recordDisplayHeader{
        border-color: solid 1px var(--color_background_Dark);
      }
    }
    > .recordMap{
      .viewMap{ font-size: 0.9em; }
      .viewFit{ font-size: 1em; }
    }
  } // .recordDisplay

    .Summary_Set{
      display: block;
      position: relative;
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      user-select: none;
      &:not(.noAnim){
        .rows > .row {
          > .line{ transition: all 200ms ease-in-out; }
        }
      }


      > .summaryControls {
        display: block;
        position: relative;
        text-align: center;
        border-bottom: solid 1px #E9E9E9;
        margin-top: -1px;

        svg.sizeLegend{
          position: absolute;
          top: 20px;
          overflow: visible;
          cursor: default;
          user-select: none;
          > .legendHeader{
            font-size: 0.7em;
            alignment-baseline: central;
            fill: #969da3;
            text-anchor: start;
          }
          .legendMark{
            > .legendCircle{
              stroke: gray;
              stroke-width: 1;
              fill: none;
            }
            > .legendLine{
              stroke: gray;
              stroke-width: 1;
              stroke-dasharray: 0.8;
            }
            > .legendLabel{
              font-size: 0.7em;
              alignment-baseline: central;
              fill: gray;
            }
          }
        }
      } // summaryControls
      
      > svg.setMatrix{
        display: block;
      }

      .rows{
        position: relative;
        display: block;
        width: 100%;
        height: 100%;
        > .row{
          position: absolute;
          left: 0px;
          width: 100%;
          display: block;
          cursor: default;
          > .line{
            display: block;
            stroke: #DADADA;
            stroke-width: 1px;
            stroke-linecap: round;
            pointer-events: none;
          }
          > .catLabel{
            font-family: inherit;
            font-weight: 300;
            alignment-baseline: middle;
            &.label_vert{
              text-anchor: start !important;
              background-color: white;
              display:none;
            }
          }
          &[selection]{
            > .catLabel{
              font-weight: 700;
              &.label_vert[show=true]{ display: block; }
            }
            > .line{ stroke: var(--color_background_Dark); }
          }
          &.withRecordHighlight {
            > .catLabel{ font-weight: 700; }
            > .line{ stroke: var(--color_onRecord-darken-50) !important; stroke-width: 2; }
          }
        }
      } // .rows

      g.setPairGroup[animate_position="true"]> .setPairGlyph { transition: all 500ms linear; }
      g.setPairGroup[animate_position="false"]> .setPairGlyph { transition: none; }

      &[show_gridlines="false"] .rows > .row > .line{ opacity: 0.3; }

      > .belowMatrix{
        display: flex;
        flex-direction: row;
        height: 18px;
        padding-top: 6px;
        cursor: default;
        border-top: solid 1px #E9E9E9;
        > .matrixInfo{
          font-size: 0.7em;
          color: #919191;
          margin: 0px 3px;
          display: inline-block;
          vertical-align: top;
          .circleeee{
            width:10px;
            height: 10px;
            border-radius: 10px;
            display: inline-block;
            margin-right: 2px;
            background-color: var(--color_bars);
            &.borrderr{
              border-top: solid 2px #4000ff;
              border-left: solid 2px #4000ff;
              border-bottom: solid 2px #4000ff;
              border-radius: 5px 0px 0px 5px;
              width: 8px;
            }
          }
          &.subsetCount{
            flex: 1 1 auto;
          }
          &.strengthControl{
            display: none;
            color: rgb(43, 43, 43) !important;
            border-right: 2px solid var(--color_set_containment);
            cursor: default;
            padding: 0px 3px;
            user-select: none;
            height: 1.2em;
    
            background-color: #eaeaea;
            background: linear-gradient(to right, rgb(235, 235, 235) 0%,rgb(169, 181, 190) 100%);
            text-shadow: 0px 0px 2px #FFFFFF;
    
            >.strengthLabel{
              display: inline-block;
              width: 46px;
              &:first-child{ text-align: left; }
              &:last-child{ text-align: right; }
            }
            >.strengthText{ 
              font-weight: 600;
            }
          }
    
          .subsetCount_Text:after{ content: " Subsets ⊆"; }
        }
      }
    } // Summary_Set


  .removeRecordPanelButton{
    display: none;
  }

  .noUi-horizontal{
    height: 10px;
    border: solid 1px var(--color_axis_line);
    .noUi-handle{
      height: 20px;
      width: 20px;
      right: -10px !important;
      border-radius: 1em;
      background: var(--color_darkGrayBackground);
      box-shadow: none;
      &:after, &:before{
        display: none;
      }
      &:hover{
        cursor: pointer;
        background: var(--color_hoverAction);
      }
    }
    .noUi-connect{
      background: var(--color_background_Dark);
      opacity: 0.4;
    }
    .noUi-origin, .noUi-connect{
      transition: transform 700ms ease-in-out;
    }
  }
  .timeseriesRange .noUi-horizontal .noUi-handle{
    height: 12px;
    width: 12px;
    top: -2px;
    right: -6px !important;
  }

  .colorGroup{
    > .attribLegendGroup{ 
      order: 1;
      min-width: 150px;
      max-width: 550px;
    }
    > .editColorTheme{ 
      order: 2; 
      margin: 0 4px 0 8px !important;
    }
    > .attribControlGroup{ order: 3; }
  }

  .attribGroup{
    display: flex;
    justify-content: center;
    flex-wrap: nowrap;
    align-items: center;
    align-self: flex-end;
    flex: 0;
    padding: 4px 8px;

    > .attribControlGroup{
      align-items: center;
      display: flex;
      padding: 0px 4px;
      user-select: none;
      > .summaryGroup {
        > select.mainSelect{
          text-align-last: center;
        }
      }
    }
    > .attribLegendGroup{
      display: none;
      flex-direction: row;
      flex: 1;
      margin: 0px 12px;
      user-select: none;
    }
    select.mainSelect{
      background-color: #888 !important;
      width: 80px;
    }
    .dotSizes{
      white-space: nowrap;
      padding-left: 0px;
      > .dotSize{ display: inline-block; }
    }
    .header{ padding-right: 6px; }
    &.sizeGroup{
      justify-content: flex-start;

      .summaryGroup{
        > .choices{ order: 2; }
        > .summaryDescription{ order: 1; }
      }
    }
    &.colorGroup{
      justify-content: flex-end;
    }
  }

  input.attribDetailRange{
    vertical-align: top;
    height: 12px;

    background: transparent;
    &:focus { 
      outline: none;
    }

    // http://jsfiddle.net/brenna/f4uq9edL/
    -webkit-appearance: none;
    border: 0px solid white;
    
    &::-webkit-slider-runnable-track {
      height: 5px;
      background: #b0b0b0;
      border: none;
      border-radius: 3px;
    }
    &::-webkit-slider-thumb {
      -webkit-appearance: none;
      border: none;
      height: 14px;
      width: 8px;
      border-radius: 2px;
      background: var(--color_darkGrayBackground);
      box-shadow: 0px 0px 3px white, 0px 0px 1px white;
      margin-top: -4px;
    }
    &:hover::-webkit-slider-runnable-track {
      background: darken(#b0b0b0,10%);
    }
    &:hover::-webkit-slider-thumb {
      box-shadow: 0px 0px 3px white, 0px 0px 5px white, 0px 0px 10px white;
    }

    &::-moz-range-track {
      height: 5px;
      background: #b0b0b0;
      border: none;
      border-radius: 3px;
    }
    &::-moz-range-thumb {
      border: none;
      height: 14px;
      width: 8px;
      border-radius: 2px;
      background: var(--color_darkGrayBackground);
    }

    &:-moz-focusring{
      background: darken(#b0b0b0,10%);
    }

    &::-ms-track {
      height: 5px;
      
      background: transparent;
      
      border-color: transparent;
      border-width: 6px 0;

      color: transparent;
    }
    &::-ms-fill-lower {
      background: #b0b0b0;
      border: 0.2px solid #010101;
      border-radius: 2px;
    }
    &::-ms-fill-upper {
      background: #b0b0b0;
      border: 0.2px solid #010101;
      border-radius: 2px;
    }
    &::-ms-thumb {
      border: none;
      height: 14px;
      width: 8px;
      border-radius: 2px;
      background: var(--color_darkGrayBackground);
      cursor: pointer;
    }
    &:focus::-ms-fill-lower {
      background: #888;
    }
    &:focus::-ms-fill-upper {
      background: #ccc;
    }
  }

  .sizeLegendGroup{
    display: flex;
    > .sizeGlyph{
      flex: 1;
      padding: 0px 4px;
      > .glyphWrapper {
        display: flex;
        height: 1em;
        position: relative;
        overflow: hidden;
        text-align: center;
        align-items: center;
        > .theGlyph{
          display: block;
          margin: 0 auto;
          background-color: var(--color_axis_line_light);
          border: solid 1px gray;
          border-radius: 2em;
          width: 1em;
          height: 1em;
        }
      }
      > .glyphLabel {
        display: block;
        font-weight: 300;
        font-size: 0.8em;
        height: 0.9em;
        color: gray;
      }
    }
  }
  .dotSizes{
    display: block;
    padding: 0px 6px;
    position: relative;
    top: 2px;
    > .dotSize{
      display: block;
      cursor: pointer;
      color: #BBB;
      width: 1em;
      height: 1em;
      transition: all 250ms;
      &:hover { 
        color: var(--color_hoverAction);
        &.dotSize-expand ~ .sampleDot { 
          animation: expandIcon 1s infinite ease-out;
        }
        &.dotSize-compress ~ .sampleDot { 
          animation: compressIcon 1s infinite ease-out;
        }
      }
    }
  }

  .tableHeaderGroup{
    border-bottom: solid 1px lightgray;
    flex: 0 0 auto; // flexing shouldn't shrink or expand this element
    display: flex;
    > .gap{
      flex: 1;
    }
    > .tableConfig{
      color: gray;
      align-self: center;
      margin-right: 0.3em;
      cursor: pointer;
      &:hover{
        color: var(--color_hoverAction);
      }
    }
  }

  .choices{
    display: inline-block;
    margin: 1px;
    min-width: 150px;

    > .choices__list--dropdown .choices__item--selectable:after{
      display: none;
    }

    > .choices__inner{
      min-height: auto;
      border-radius: unset;
      background: white;
      font-weight: 300;
    }
    > .choices__list{
      width: auto;
      min-width: 100%;
      max-width: 50vw;
      text-align: left;
      font-weight: 300;
      z-index: 1000;
    }
    .choices__item--choice{
      &.Compare_A{ color: var(--color_Compare_A); }
      &.Compare_B{ color: var(--color_Compare_B); }
      &.Compare_C{ color: var(--color_Compare_C); }
      &.Compare_D{ color: var(--color_Compare_D); }
      &.Compare_E{ color: var(--color_Compare_E); }
    }
  }

  .choices__list--single > .choices__item--selectable{
    text-align: center;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .choices__list--multiple .choices__item{
    background-color: var(--color_filter_clear);
    border-color: var(--color_filter_clear);
    border-width: 0px;
    font-weight: 400;
    cursor: default;
    > .choices__button{ 
      cursor: pointer;
    } 
    &[data-value="-"]{
      // remove button. pill with no value / all cannot be removed
      padding-right: 16px; 
      > .choices__button{ display: none; } 
    }
  }

  .choices[data-type*=select-multiple] .choices__button, 
  .choices[data-type*=text] .choices__button{
    border-left-color: white;
  }

  .summaryGroup > .choices{
    &[data-type="select-one"]{
      > .choices__inner{
        padding: 0 10px;
        background: var(--color_darkGrayBackground);
        color: white;
        &:hover{
          background-color: var(--color_hoverAction);
          color: white !important;
        }
      }
      &.is-open{
        > .choices__inner{
          background-color: var(--color_hoverAction);
          color: white !important;
        }
        &:after{
          border-color: transparent transparent white transparent;
        }
      }
      &:after{
        border-color: white transparent transparent transparent;
      }
    }
  }


  .attribControlGroup{
    display: flex;
    white-space: nowrap;

    > .header{
      font-family: "Roboto Slab";
      align-self: center;
      margin-right: 2px;
      font-weight: 300;
      cursor: default;
      display: inline-block;
      height: 1.9em; // legends are 1.9em. 1em for color/size glyphs, 0.9em for text.
      display: flex;
      align-items: center;
    }
    > .summaryGroup{
      display: flex;
      align-items: center;

      position: relative;

      > .summaryDescription{
        color: gray;
        margin: 0 0.5em;
        cursor: default;
        font-size: 0.8em;
        line-height: 1.25em;
        &:hover{ color: black; }
      }
      > .selectButton{
        display: inline-flex;;
        padding: 4px 10px;
        background: var(--color_darkGrayBackground);
        color: white;
        text-align: center;
        font-weight: 300;
        font-size: 0.9em;

        margin: 1px;
        min-width: 150px;

        cursor: pointer;
        user-select: none;

        // limited width?
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;

        transition: var(--transition_bgcolor);

        &:hover{
          background-color: var(--color_hoverAction);
        }

        > .text{
          flex: 1 1 auto;
        }
        > .caret{
          width: 1em;
          height: 1em;
          text-align: right;
          transition: transform 250ms;
        }
      }
      > .selectOptions{
        position: absolute;

        text-align: left;

        opacity: 0;
        transition: var(--transition_opacity);
        z-index: -1;
        background: white;
        border: solid 1px var(--color_background_Light-darken-15);

        pointer-events: none;

        max-height: 50vh;
        overflow: auto;

        .option{
          > .optionItem{
            display: flex;
            font-size: 0.9em;
            font-weight: 300;
            padding: 8px 10px 8px 0px;
            cursor: pointer;
            height: 2.5em;
            transition: var(--transition_opacity_slow), height 500ms, transform 400ms ease-in-out, all 250ms;
            &:hover{
              background-color: var(--color_background_VeryLight);
            }
            > .groupControl{
              height: 0.9em;
              width: 1.7em;
              color: gray;
              text-align: center;
              transform: scale(1.3);
              &:hover{
                color: var(--color_hoverAction);
              }
            }
          }
          &.isSelectable{
            > .optionItem:hover > .optionName{
              color: var(--color_hoverAction);
            }
          }
          &.active > .optionItem{
            font-weight: 500;
          }
          &:not(.hasSubItems){
            > .optionItem > .groupControl{ visibility: hidden; }
          }

          &.collapsed {
            > .optionItem > .groupControl > .fa{
              transform: rotate(-90deg);
            }
            > .subItems{
              pointer-events: none;
              .optionItem{ height: 0px; padding: 0px; opacity: 0; }
            }
          }

          > .subItems{
            margin-left: 0.8em;
            > .option{
              border-left: solid 1px lightgray;
            }
          }
        }
      }
      &.dropdownOpen{
        > .selectButton > .caret{
          transform: scale(1, -1);
        }
        > .selectOptions{
          z-index: 3;
          opacity: 1;

          pointer-events: all;
        }
      }


      > select.mainSelect{
        display: inline-block;
        position: relative;
        margin-right: 2px;
        max-width: 220px;
        background: var(--color_darkGrayBackground);
        color: white;
        border: none;

        vertical-align: top;

        font-size: 1em;
        font-family: "Roboto Slab";
        font-weight: 400;
        text-align: center;
        transition: var(--transition_bgcolor);

        &[disabled]{
          color: gray;
          background-color: var(--color_background_Light);
          font-weight: 400;
        }
        &:hover{
          background-color: var(--color_hoverAction);
          color: white !important;
        }
        &:focus{
          outline: none;
        }
      }
    }
    > .recordReverseSortButton{
      transition: all 250ms;
      color: gray;
      opacity: 0;
      > .fa { transition: all 250ms; }
      &:hover{
        opacity: 1;
        color: var(--color_hoverAction);
        > .fa { transform: scaleY(-1); }
      }
    }
    &.active{
      .icon{ display: none; }
    }


    // side-ways buttons
    &.timeSeriesControlGroup,
    &.scatterYControlGroup
    {
      display: block;
      max-width: 400px;
      //transform: rotate(-90deg) translateX(-50%);
      transform-origin: 0 0;
      position: absolute;
      left: -80px;
      top: 50%;
      transform: translateY(-50%);
      white-space: nowrap;
      > .summaryDescription{
        margin-right: 0.5em;
        color: gray;
        vertical-align: bottom;
        transform: rotateZ(90deg);
        transform-origin: 50% 50%;
        cursor: pointer;
        position: absolute;
        left: -1em;
        top: 0.3em;
        font-size: 0.9em;
      }
      > .summaryGroup {
        flex-direction: column;
        &.dropdownOpen{
          > .selectButton > .caret{
            transform: rotate(90deg) scale(1, -1);
          }
        }
        > .selectButton{
          writing-mode: vertical-rl;
          text-orientation: mixed;
          min-width: auto;
          transform: rotate(180deg);
          min-height: 150px;
          padding: 10px 4px;
          > .caret{
            transform: rotate(90deg);
          }
        }
        > .selectOptions{
          transform: rotate(90deg);
        }
        > .summaryDescription{
          text-align: center;
          width: 100%;
          margin-top: 3px;
        }
      }
    }
  } // attribControlGroup


  .recordGroup_List .sortControlGroup{
    align-items: center;
  }

  .showRecordRank{
    display: none;
    width: var(--list_recordRank);
    margin-top: 4px;
    pointer-events: none;
    white-space: nowrap;
    color: gray;
    text-align: center;
    font-weight: 100;
    font-size: 0.9em;
    vertical-align: bottom;
  }

  .recordDisplayHeader{
    display: flex;
    flex-direction: row;
    position: relative;
    background-color: white;
    border: solid 1px var(--color_background_Light-darken-15);
    align-items: center;
    transition: border-color 250ms linear;
    padding-left: 2px;
    min-height: 1.8em; // currently matches default height of summaries

    > .far, >.fal, >.fa{
      font-size: 0.9em;
      color: var(--color_background_Dark);
      cursor: pointer;
      opacity: 0;
      margin: 0px 2px;
      transition: var(--transition_opacity), color 250ms;
      &:hover{ color: var(--color_hoverAction); }
    }

    > .recordDisplayName{
      padding: 0.1em 0.5em;
      font-family: "Roboto Slab", serif;
      font-weight: 600;
      pointer-events: none;
      cursor: default;
      white-space: nowrap;
      flex-grow: 1;
      font-size: 1.05em;
      text-align: center;
    }
    
    > .buttonRecordViewCollapse, 
    > .buttonRecordViewExpand{
      display: block;
      &:hover{ color: var(--color_hoverAction); }
    }
    > .buttonRecordViewExpand{
      display: none;
    }

    > .recordTextSearch {
      flex: 1;
      display: flex;
      padding: 3px 2px;
      height: 100%;
      > .textSearchInput{
        display: none;
        transition: var(--transition_bgcolor);
        font-size: inherit;
        font-size: 0.8em;
        margin: 2px;
      }
      > .fa-search, > .fa-times-circle{
        font-size: inherit;
        align-self: center;
        height: 1.2em;
      }
      > .clearSearchText{
        display: none;
        position: absolute;
        right: 3px;
        top: 1px;
        cursor: pointer;
        color: gray;
        &:hover{ color: var(--color_hoverAction); }
      }
      &[active="true"]{
        > .textSearchInput{ display: inline-block; flex: 1; }
      }
    } // recordTextSearch
  } // recordDisplayHeader

  .textSearchBox{
    white-space: nowrap;
    position: relative;
    height: 18px;
    > .fa, 
    > .far, 
    > .fal{
      vertical-align: middle;
      padding-left: 1px;
      font-size: 0.8em;
      width: 1.1em;
      text-align: center;
    }
    > .fa-times, >.fa-times-circle{
      cursor: pointer;
      pointer-events: all;
      color: gray;
      &:hover{ color: var(--color_hoverAction); }
      &:before{ content: "\f057"; }
      display: none;
    }
    > .fa-search{
      pointer-events: none;
      color: var(--color_hoverAction);
      cursor: default;
    }
    &.showClear{
      > .fa-times, > .fa-times-circle{ display: inline-block; }
      > .fa-search{ display: none; }
    }
  } // textSearchBox

  .textSearchInput{
    font-size: 0.8em;
    font-weight: 500;
    color: gray;
    padding: 0px 2px;
    background-color:rgba(255, 255, 255, 0);
    pointer-events: all;
    border-width: 0px;
    border-style: solid;
    outline-color: var(--color_hoverAction);
    outline-style: solid;
    outline-width: 0px;
    margin: 1px;
    &:focus{
      outline-width: 1px;
      background-color: white;
      outline-offset: 0px;
      &::-webkit-input-placeholder{
        color: #F3CDCD;
      }
    }
    &:hover{
      outline-width: 1px;
      background-color: white;
      &::-webkit-input-placeholder{
        opacity: 1;
      }
    }
    &::-webkit-input-placeholder{
      color: var(--color_hoverAction);
      font-weight: 300;
      opacity: 0.7;
    }
  }

  .recordDisplay_ViewGroup{
    margin-left: 4px;
    font-size: 1.1em;
    white-space: nowrap;
    height: 100%;
    user-select: none;
    &.disabled{
      display: none;
    }
  }
  [class^="recordDisplay_ViewAs"]{
    display: inline-block;
    height: 100%;
    outline: solid 1px var(--color_background_Dark);
    padding: 3px 5px;
    vertical-align: top;
    text-align: center;
    font-weight: 300;
    color: gray;
    background-color: white;
    cursor: pointer;
    transition: color 250ms;
    // chart type is not supported given the dataset
    &.disabled{
      display: none;
    }
    // chart type is actives
    &.active{
      .activeViewOption();
    }
    // inactive chart type hover
    &:not(.active):hover{ 
      color: var(--color_hoverAction);
    }
    > .ViewTitle{
      margin-left: 3px;
      vertical-align: top;
    }
  }
  .recordView_HeaderSet{
    font-weight: 300;
    font-size: 0.9em;
    cursor: default;
    margin: 1px 3px 1px 1px;
    display: inline-block;
  }

  #kshfLineChartTip_Active   { fill: var(--color_bars-darken-10); }
  #kshfLineChartTip_Compare_A{ fill: white; }
  #kshfLineChartTip_Compare_B{ fill: white; }
  #kshfLineChartTip_Compare_C{ fill: white; }
  #kshfLineChartTip_Compare_D{ fill: white; }
  #kshfLineChartTip_Compare_E{ fill: white; }


  .AutoSaveBlock{
    display: none;
    position: relative;
    border-right: solid 1px gray;
    cursor: default;
    width: 25px;
  }
  .AutoSaveText{
    transform: rotate(-90deg);
    display: inline-block;
    transform-origin: 100% 100%;
    position: absolute;
    right: 1px;
    top: 0.5em;
    white-space: nowrap;
    font-weight: 100;
    color: gray;
  }
  .copyLink{
    margin: 8px;
    font-size: 0.7em;
    opacity: 0.5;
    cursor: pointer;
    transform-origin: 50% 50%;
    &:hover{ color: var(--color_hoverAction); }
    &.saving{ animation: fa-spin 1.5s infinite linear; }
  }

  .contextMenu{
    z-index: 1050;
    background-color: white;
    position: absolute;
    font-size: 0.8em;
    font-weight: 300;
    box-shadow: 0px 2px 4px grey;
    min-width: 100px;
    min-height: 1.5em;

    transition: var(--transition_opacity);
    opacity: 0;

    &.visible{
      opacity: 1;
    }

    > .popperArrow,
    > .popperArrow:before{
      position: absolute;
      width: 8px;
      height: 8px;
      z-index: -1;
    }
    > .popperArrow:before{
      content: '';
      transform: rotate(45deg);
      background-color: var(--color_background_Dark);
    }
    &[data-popper-placement^='top'] > .popperArrow { bottom: -4px; }
    &[data-popper-placement^='bottom'] > .popperArrow { top: -4px; }
    &[data-popper-placement^='left'] > .popperArrow { right: -4px; }
    &[data-popper-placement^='right'] > .popperArrow { left: -4px; }

    > .contextMenu_Header{
      background-color: var(--color_background_Dark);
      font-family: "Roboto Slab", serif;
      color: white;
      font-weight: 500;
      font-size: 1.1em;
      padding: 2px 25px 2px 5px;
      cursor: default;
    }
    > .contextMenu_Items{
      background: white;
    }
    .popupMenuItem{
      cursor: pointer;
      white-space: nowrap;
      user-select: none;
      &:not(:first-of-type){
        border-top: solid 1px lightgray;
      }
      .colorLegend{
        display: flex;
        width: 4em;
        height: 1em;
        margin-left: 0.5em;
        > .colorLegendBox{ flex: 1; }
      }
      > .popupMenuItem_Header{ 
        display: flex;
        flex-direction: row;
        align-items: center;
        padding: 3px 0px;
        &:hover{ color: var(--color_hoverAction); }
        &.active{
          font-weight: 400;
          background: #38404c;
          background: linear-gradient(-90deg, #38404c -300%, rgba(235, 235, 235, 0) 100%);
          text-shadow: 0px 0px 2px white;
        }
        > .popupMenuItem_Header_Text{
          flex-grow: 1;
          display: flex;
          flex-direction: row;
          align-items: center;
          position: relative;
          > .mainText{
            flex-grow: 1;
            margin-right: 1em;
            display: flex;
            // cat split icons
            > .alignIcon{
              width: 1.3em;
              text-align: center;
              font-weight: 700;
            }
          }
          > .sampleValue {
            margin-right: 0.2em;
            color: gray;
            &:before{ content: "("; }
            &:after { content: ")"; }
          }
        }
        > .popupMenuItem_Header_Icon{
          width: 1.7em;
          text-align: center;
          > .custom_icon_compare{
            transform: scale(0.8);
            vertical-align: top;
            height: 1em;
          }
        }
        > .expandCollapseIcon{
          width: 1.2em;
          text-align: center;
          transition: all 250ms;
        }
        > .helparticle{
          margin: 0 2px;
          opacity: 0;
          color: gray;
          transition: var(--transition_opacity);
          &:hover{ color: var(--color_hoverAction); }
        }
        &:hover{
          > .helparticle{
            opacity: 1;
          }
        }
      }
      &.expanded{
        > .popupMenuItem_Header{ 
          font-weight: 500;
          border-bottom: solid 1px var(--color_background_Dark);
          > .expandCollapseIcon{ transform: scaleY(-1); }
        }
      }
      &:not(.expanded){
        > .popupMenuItem_Children{ display: none;}
      }
    }
    .popupMenu_Close{
      text-align: right;
      position: absolute;
      right: 4px;
      top: 3px;
      cursor: pointer;
      font-size: 1.2em;
      color: white;
      &:hover{ color: var(--color_background_VeryLight); }
    }
    > .contextMenu_Items > .popupMenuItem > .popupMenuItem_Children{
      max-height: 170px;
      overflow: auto;
    }
    .popupMenuItem_Children{
      padding-left: 1.7em;
      > .popupMenuItem > .popupMenuItem_Header:hover{ color: var(--color_hoverAction); }
    }
  }


  .kshfBookmarkBlock{
    border-top: solid 1px gray;
    border-left: solid 3px white;
    padding: 2px 0px 4px 2px;
    min-width: 170px;
    position: relative;
    transition: all 250ms;
    .bookmarkActionIcon {
      font-size: 0.9em;
      display: inline-block;
      color: gray;
      cursor: pointer;
      padding: 0px 2px;
      text-decoration: none;
      text-align: center;
      opacity: 0;
      margin-top: 0.2em;
      transition: var(--transition_opacity);
      &:hover{ color: var(--color_hoverAction); }
      &.bookmarkActionIcon-Load{
        opacity: 1;
        //color: var(--color_hoverAction);
        transition: all 250ms;
      }
      &.bookmarkActionIcon-Attribs{
        opacity: 0.5;
      }
      &.bookmarkActionIcon-Filtered{
        opacity: 0.5;
      }
      &.bookmarkActionIcon-Social{
        display: none;
        font-size: 1em;
        > .fa-facebook-square{
          color: #3B5998;
        }
        > .fa-twitter-square{
          color: #1DA1F2;
        }
      }
    }
    > .bottomRow{
      position: absolute;
      bottom: 0px;
      left: 0px;
      padding: 3px 3px 2px;
      width: 100%;
      display: flex;
      justify-content: space-between;
      > .SocialShareLinks{
        flex: 1;
        text-align: center;
      }
      &.showShare{
        .bookmarkActionIcon-Attribs{ display: none; }
        .bookmarkActionIcon-Load{ display: none; }
        .bookmarkActionIcon-Social{ display: inline; }
        .bookmarkActionIcon-ShareButton{ font-weight: 700; }
      }
    }
    .BookmarkIconAlign{
      width: 20px;
      text-align: center;
    }
    > .BookmarkName{
      display: block;
      font-weight: 400;
      border-bottom: solid 1px gray;
      font-size: 1em;
      white-space: nowrap;
      cursor: default;
      max-width: 100%;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
    > .BookmarkLine{
      margin-top: 2px;
      overflow: hidden;
      text-overflow: ellipsis;
      > .BookmarkNoteAction{
        cursor: pointer;
        &:hover{ color: var(--color_hoverAction); }
      }
      > .BookmarkNote{
        font-size: 0.9em;
        font-family: "Roboto Condensed", sans-serif;
        max-width: 140px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    }

    > .dashboardID{
      display: inline-block;
      color: lightgray;
      font-size: 0.8em;
      transition: color 250ms;
    }

    .bookmarkActionIcon-Star{
      color: lightgray;
      font-size: 0.8em;
      display: none;
      cursor: pointer;
      &.ReallyStarred{
        color: gray;
        opacity: 1;
        display: inline-block;
        cursor: default;
        > .fa:before{ content: "\f005"; } // full-star
      }
    }

    > .selfIcons{
      float: right;
      width: 1.3em;
      text-align: center;
      > .bookmarkActionIcon{
        display: block;
      }
    }




    .BookmarkPrivacy{
      display: none;
      color: gray;
      vertical-align: top;
      position: relative;
    }
    .BookmarkDateTime{
      font-size: 0.8em;
      color: #a5a5a5;
      cursor: default;
      font-family: "Roboto Condensed", sans-serif;
    }
    .BookmarkAuthor{
      font-size: 0.9em;
      cursor: default;
      text-align: left;
      font-family: "Roboto Condensed", sans-serif;
      display: inline-block;
      color: gray;
      &.selfAuthor{
        &:after{ content: " * "; font-size: 0.7em; vertical-align: top;}
      }
    }

    &.PrivateBookmark{
      .bookmarkActionIcon-Star{pointer-events: none; }
      .BookmarkPrivacy.fa-eye-slash{ display: inline-block; }
    }
    &:not(.PrivateBookmark){
      .BookmarkPrivacy.fa-eye{ display: inline-block; }
      .bookmarkActionIcon-Star{ 
        &:hover{ color: var(--color_hoverAction); }
      }
    }
    

    &:hover{
      > .dashboardID{ color: gray; }
      .bookmarkActionIcon{
        opacity: 1;
        
      }
    }
  }

}





.tippy-box[data-theme~='timeseriesRecordDot']{
  font-size: 1.1em !important;
}

.tippy-popper[x-placement="right"]{
  > [data-theme~='kshf-record']{
    > .tippy-svg-arrow{
      transform: translateX(-1px);
    }
  }
}

.tippy-box[data-theme~='kshf-tooltip']{
  text-align: center;
  &[data-theme~='kshf-record']{
    background-color: white;
    font-family: inherit;
    color: black;
    text-align: inherit;
    border: solid 1px var(--color_darkGrayBackground);
    box-shadow: 0px 0px 10px gray;
    font-weight: 500;
    font-size: 1em;
    padding: 0px;
    border-radius: 0px;

    > .tippy-content{
      padding: 0px;
    }

    > .tippy-svg-arrow{
      fill: var(--color_darkGrayBackground);
    }

    > .tippy-roundarrow{
      > svg > path{
        fill: white;
        stroke: lightgray;
        stroke-width: 1px;
      }
    }

    .asdsdadsada{
      padding: 2px 3px;
      font-weight: 300;
      font-size: 0.9em;
    }

    .blockName.timeseriesName{
      display: block; 
      margin-top: 2px;
      padding: 2px;
      //max-width: 240px; // max-width is set by tippy content box
      border-top: solid 1px lightgray;
      text-align: center;
      font-weight: 300;
      font-size: 0.9em;
      > .blockName_Print{
        font-weight: 400;
      }
    }
    .sparklineWrapper{
      padding: 17px 45px;
    }
    .recordColorInfo + .sparklineWrapper{
      border-top: solid 1px lightgray;
    }


    .extraInfo{
      font-weight: 300;
      font-size: 0.8em;
    }

    .unitName{
      margin-left: 1px;
      margin-right: 1px;
    }
    .mapItemName{
      text-align: center;
      padding: 5px;
      font-size: 1.1em;
      background-color: #F7F7F7;
      display: block;
      border-bottom: solid 2px var(--color_darkGrayBackground);
      font-weight: 500;
      &[class*='bg_']{ 
        color: white;
        border-bottom: none;
      }
    }
    .recordColorInfo{
      display: block;
      padding: 4px;
      text-align: center;
      max-width: 240px;
      margin: 0 auto; // center-align
    }
    .mapTooltipValue{
      font-size: 1em;
      font-weight: 500;
      > .colorBox{
        border-radius: 1em;
        margin: 0.1em;
      }
    }
    .mapTooltipLabel{
      display: inline-block;
      font-size: 0.9em;
      font-weight: 300;
    }

    .tooltipSparkline{
      width: 150px;
      height: 40px;
      margin: 0 auto;
      display: block;
      overflow: visible;
      box-sizing: content-box;
      border-left: dashed 1px lightgray;
      border-right: dashed 1px lightgray;
      path.timeline{
        fill: none;
        stroke: var(--color_bars);
        stroke-width: 2.5px;
      }
      .activeValueDot{
        stroke: gray;
        stroke-width: 1px;
        fill-opacity: 0.8;
      }
      .limitText{
        fill: gray;
        font-weight: 300;
        font-size: 0.8em;
        text-shadow: 0px 0px 5px white, 0px 0px 2px white, 0px 0px 2px white;
      }
      .activeValueText{
        text-anchor: middle; 
        text-shadow: 0px 0px 5px white, 0px 0px 2px white, 0px 0px 2px white;
      }
      .activeValueTime{
        text-anchor: middle; 
      }
      .maxValueDot{
        stroke: gray;
        stroke-width: 1px;
        fill-opacity: 0.8;
      }
      .maxValueText{
        fill: #777;
        text-anchor: middle;
        font-size: 0.8em;
        font-weight: 300;
        text-shadow: 0px 0px 5px white, 0px 0px 2px white, 0px 0px 2px white;
      }
    }

  }
}

.kshfTooltip {
  font-size: 10px;
  position: absolute;
  left: 0px;
  top: 0px;
  padding: 5px;
  z-index: 100000;
  pointer-events: none;

  &.recordTip{
    > .tipsy-inner{
      background-color: white;
      font-family: inherit;
      color: black;
      text-align: inherit;
      border: solid 1px lightgray;
      font-weight: 500;
      font-size: 1.5em;
      padding: 0px;
    }
  }

  > .tipsy-inner {
    font-family: Helvetica, Arial, sans-serif;
    padding: 3px;
    font-size: 1.2em;
    background-color: #000;
    color: #FFF;
    max-width: 400px;
    text-align: center;
    font-weight: 300;
    border-radius: 3px;
    box-shadow: 0 0 5px gray;
  }
  > .tipsy-arrow { 
    position: absolute;
    width: 0;
    height: 0;
    line-height: 0;
    border: 5px dashed #000;
  }
  &.tipsy-n  .tipsy-arrow { 
    top: 0px; left: 50%; margin-left: -5px; border-bottom-style: solid; border-top: none; border-left-color: transparent !important; border-right-color: transparent !important; 
  }
  &.tipsy-nw .tipsy-arrow { 
    top: 0; left: 10px; border-bottom-style: solid; border-top: none; border-left-color: transparent !important; border-right-color: transparent !important;
  }
  &.tipsy-ne .tipsy-arrow { 
    top: 0; right: 10px; border-bottom-style: solid; border-top: none;  border-left-color: transparent !important; border-right-color: transparent !important;
  }
  &.tipsy-s  .tipsy-arrow { 
    bottom: 0; left: 50%; margin-left: -5px; border-top-style: solid; border-bottom: none;  border-left-color: transparent !important; border-right-color: transparent !important; 
  }
  &.tipsy-sw .tipsy-arrow { 
    bottom: 0; left: 10px; border-top-style: solid; border-bottom: none;  border-left-color: transparent !important; border-right-color: transparent !important; 
  }
  &.tipsy-se .tipsy-arrow { 
    bottom: 0; right: 10px; border-top-style: solid; border-bottom: none; border-left-color: transparent !important; border-right-color: transparent !important; 
  }
  &.tipsy-e  .tipsy-arrow { 
    right: 0; top: 50%; margin-top: -5px; border-left-style: solid; border-right: none; border-top-color: transparent !important; border-bottom-color: transparent !important; 
  }
  &.tipsy-w  .tipsy-arrow { 
    left: 0; top: 50%; margin-top: -5px; border-right-style: solid; border-left: none; border-top-color: transparent !important; border-bottom-color: transparent !important; 
  }

}


.cursorGrabbing(){
  cursor: -moz-grabbing !important;
  cursor: -webkit-grabbing !important;
  cursor: grabbing !important;
}
.cursorGrab(){
  cursor: -moz-grab;
  cursor: -webkit-grab;
  cursor: grab;
}

@keyframes slidein {
  from {
    margin-left: 100%;
    width: 300%; 
  }

  to {
    margin-left: 0%;
    width: 100%;
  }
}

@keyframes fadeInFromNone {
  0% { display: none; opacity: 0; }
  1% {  display: block; opacity: 0; }
  100% {  display: block; opacity: 1; }
}

@keyframes stretchdelay {
  0%, 40%, 100% { transform: scaleY(0.4); }
  20% { transform: scaleY(0.8); background-color: rgb(250, 119, 70); }
};
@keyframes bookmark {
  0%{ transform: translateY(-1em); opacity: 0.2; }
  80%{ transform: translateY(0); opacity: 1; }
};


@keyframes mapPreviewAnimation {
  0% { opacity: 0; } 90%, 100% { opacity: 1; }
}
@keyframes helpInFlip {
  0%, 60%, 90%{ transform: scale(1); } 80%{ transform: scale(-1, 1); }
}
@keyframes notifAlert {
  0%, 60%, 90%, 100% { color: #635d46; transform: scale(0.8); } 80%{ color: orangered; transform: scale(1); }
}
@keyframes rocketShoot {
  0% { transform: translate(-2px,2px); opacity: 0; } 10% { opacity: 1; } 80%, 100% { transform: translate(10px,-15px); }
}
@keyframes expandIcon {
  0% { transform: scale(1); } 50% { transform: scale(1.3); } 100% { transform: scale(1.3); }
}
@keyframes compressIcon {
  0% { transform: scale(1); } 50% { transform: scale(0.5); } 100% { transform: scale(0.5); }
}

.infobox_icon{
  display: inline-block;
  position: relative;
  .kshf-fa();
  content: "\f05a";
  color: gray;
}

.kshf-fa{
  font: normal normal normal 14px/1 "Font Awesome 5 Pro";
  font-size: inherit;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.activeViewOption{
  color: white; 
  background-color: var(--color_background_Dark); 
  cursor: default;
  outline: solid 1px var(--color_background_Dark); 
}

.stroke_test{
  display: none; 
  stroke-opacity: 0.7;
  stroke-width: 1px;
  stroke: white;
}

#beacon-container .BeaconContainer{
  width: 50% !important;
  min-width: 400px !important;
}
